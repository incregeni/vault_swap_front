// Generated by @wagmi/cli@1.1.0 on 6/17/2023 at 9:05:57 PM
import {
  getContract,
  GetContractArgs,
  readContract,
  ReadContractConfig,
  ReadContractResult,
  writeContract,
  WriteContractMode,
  WriteContractArgs,
  WriteContractPreparedArgs,
  WriteContractUnpreparedArgs,
  prepareWriteContract,
  PrepareWriteContractConfig,
  watchContractEvent,
  WatchContractEventConfig,
  WatchContractEventCallback,
  PrepareWriteContractResult,
} from 'wagmi/actions';

import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi';

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VeToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const veTokenABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'token_addr', internalType: 'address', type: 'address' },
      { name: 'art_proxy', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'provider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'locktime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'deposit_type',
        internalType: 'enum VotingEscrow.DepositType',
        type: 'uint8',
        indexed: false,
      },
      { name: 'ts', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Deposit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'prevSupply',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'supply',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Supply',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'provider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'ts', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Withdraw',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DELEGATION_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAX_DELEGATES',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'abstain',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_approved', internalType: 'address', type: 'address' },
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'artProxy',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'attach',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'attachments',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_block', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOfAtNFT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'balanceOfNFT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_t', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOfNFTAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'block_number',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'checkpoint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'checkpoints',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_value', internalType: 'uint256', type: 'uint256' },
      { name: '_lock_duration', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'create_lock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_value', internalType: 'uint256', type: 'uint256' },
      { name: '_lock_duration', internalType: 'uint256', type: 'uint256' },
      { name: '_to', internalType: 'address', type: 'address' },
    ],
    name: 'create_lock_for',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'delegator', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit_for',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'detach',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'epoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotesIndex',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'get_last_user_slope',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increase_amount',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_lock_duration', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increase_unlock_time',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isApprovedOrOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'locked',
    outputs: [
      { name: 'amount', internalType: 'int128', type: 'int128' },
      { name: 'end', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'locked__end',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'uint256', type: 'uint256' },
      { name: '_to', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'merge',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'numCheckpoints',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'ownership_change',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'point_history',
    outputs: [
      { name: 'bias', internalType: 'int128', type: 'int128' },
      { name: 'slope', internalType: 'int128', type: 'int128' },
      { name: 'ts', internalType: 'uint256', type: 'uint256' },
      { name: 'blk', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_proxy', internalType: 'address', type: 'address' }],
    name: 'setArtProxy',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_team', internalType: 'address', type: 'address' }],
    name: 'setTeam',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'setVoter',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'slope_changes',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'supply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceID', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'team',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_tokenIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_block', internalType: 'uint256', type: 'uint256' }],
    name: 'totalSupplyAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 't', internalType: 'uint256', type: 'uint256' }],
    name: 'totalSupplyAtT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'user_point_epoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'user_point_history',
    outputs: [
      { name: 'bias', internalType: 'int128', type: 'int128' },
      { name: 'slope', internalType: 'int128', type: 'int128' },
      { name: 'ts', internalType: 'uint256', type: 'uint256' },
      { name: 'blk', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_idx', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'user_point_history__ts',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'voted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'voter',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'voting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'withdraw',
    outputs: [],
  },
] as const;

/**
 *
 */
export const veTokenAddress = {
  2222: '0x35361C9c2a324F5FB8f3aed2d7bA91CE1410893A',
} as const;

/**
 *
 */
export const veTokenConfig = {
  address: veTokenAddress,
  abi: veTokenABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PairFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const pairFactoryABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token0',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token1',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'stable', internalType: 'bool', type: 'bool', indexed: false },
      {
        name: 'pair',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'PairCreated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAX_FEE',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptFeeManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptPauser',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'allPairs',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'allPairsLength',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
    ],
    name: 'createPair',
    outputs: [{ name: 'pair', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feeManager',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_stable', internalType: 'bool', type: 'bool' }],
    name: 'getFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getInitializable',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bool', type: 'bool' },
    ],
    name: 'getPair',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isPair',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isPaused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pairCodeHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pauser',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pendingFeeManager',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pendingPauser',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_stable', internalType: 'bool', type: 'bool' },
      { name: '_fee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_feeManager', internalType: 'address', type: 'address' }],
    name: 'setFeeManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_state', internalType: 'bool', type: 'bool' }],
    name: 'setPause',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_pauser', internalType: 'address', type: 'address' }],
    name: 'setPauser',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stableFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'volatileFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const;

/**
 *
 */
export const pairFactoryAddress = {
  2222: '0xA138FAFc30f6Ec6980aAd22656F2F11C38B56a95',
} as const;

/**
 *
 */
export const pairFactoryConfig = {
  address: pairFactoryAddress,
  abi: pairFactoryABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Router
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const routerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_factory', internalType: 'address', type: 'address' },
      { name: '_weth', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'routes',
        internalType: 'struct Router.route[]',
        type: 'tuple[]',
        components: [
          { name: 'from', internalType: 'address', type: 'address' },
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'stable', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'UNSAFE_swapExactTokensForTokens',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
      { name: 'amountADesired', internalType: 'uint256', type: 'uint256' },
      { name: 'amountBDesired', internalType: 'uint256', type: 'uint256' },
      { name: 'amountAMin', internalType: 'uint256', type: 'uint256' },
      { name: 'amountBMin', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addLiquidity',
    outputs: [
      { name: 'amountA', internalType: 'uint256', type: 'uint256' },
      { name: 'amountB', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
      { name: 'amountTokenDesired', internalType: 'uint256', type: 'uint256' },
      { name: 'amountTokenMin', internalType: 'uint256', type: 'uint256' },
      { name: 'amountETHMin', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addLiquidityETH',
    outputs: [
      { name: 'amountToken', internalType: 'uint256', type: 'uint256' },
      { name: 'amountETH', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenIn', internalType: 'address', type: 'address' },
      { name: 'tokenOut', internalType: 'address', type: 'address' },
    ],
    name: 'getAmountOut',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'routes',
        internalType: 'struct Router.route[]',
        type: 'tuple[]',
        components: [
          { name: 'from', internalType: 'address', type: 'address' },
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'stable', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'getAmountsOut',
    outputs: [
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
    ],
    name: 'getReserves',
    outputs: [
      { name: 'reserveA', internalType: 'uint256', type: 'uint256' },
      { name: 'reserveB', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pair', internalType: 'address', type: 'address' }],
    name: 'isPair',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
    ],
    name: 'pairFor',
    outputs: [{ name: 'pair', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
      { name: 'amountADesired', internalType: 'uint256', type: 'uint256' },
      { name: 'amountBDesired', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteAddLiquidity',
    outputs: [
      { name: 'amountA', internalType: 'uint256', type: 'uint256' },
      { name: 'amountB', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteRemoveLiquidity',
    outputs: [
      { name: 'amountA', internalType: 'uint256', type: 'uint256' },
      { name: 'amountB', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'amountAMin', internalType: 'uint256', type: 'uint256' },
      { name: 'amountBMin', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeLiquidity',
    outputs: [
      { name: 'amountA', internalType: 'uint256', type: 'uint256' },
      { name: 'amountB', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'amountTokenMin', internalType: 'uint256', type: 'uint256' },
      { name: 'amountETHMin', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeLiquidityETH',
    outputs: [
      { name: 'amountToken', internalType: 'uint256', type: 'uint256' },
      { name: 'amountETH', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'amountTokenMin', internalType: 'uint256', type: 'uint256' },
      { name: 'amountETHMin', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeLiquidityETHSupportingFeeOnTransferTokens',
    outputs: [
      { name: 'amountToken', internalType: 'uint256', type: 'uint256' },
      { name: 'amountETH', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'amountTokenMin', internalType: 'uint256', type: 'uint256' },
      { name: 'amountETHMin', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'approveMax', internalType: 'bool', type: 'bool' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'removeLiquidityETHWithPermit',
    outputs: [
      { name: 'amountToken', internalType: 'uint256', type: 'uint256' },
      { name: 'amountETH', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'amountTokenMin', internalType: 'uint256', type: 'uint256' },
      { name: 'amountETHMin', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'approveMax', internalType: 'bool', type: 'bool' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens',
    outputs: [
      { name: 'amountToken', internalType: 'uint256', type: 'uint256' },
      { name: 'amountETH', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'amountAMin', internalType: 'uint256', type: 'uint256' },
      { name: 'amountBMin', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'approveMax', internalType: 'bool', type: 'bool' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'removeLiquidityWithPermit',
    outputs: [
      { name: 'amountA', internalType: 'uint256', type: 'uint256' },
      { name: 'amountB', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
    ],
    name: 'sortTokens',
    outputs: [
      { name: 'token0', internalType: 'address', type: 'address' },
      { name: 'token1', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'amountOutMin', internalType: 'uint256', type: 'uint256' },
      {
        name: 'routes',
        internalType: 'struct Router.route[]',
        type: 'tuple[]',
        components: [
          { name: 'from', internalType: 'address', type: 'address' },
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'stable', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swapExactETHForTokens',
    outputs: [
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'amountOutMin', internalType: 'uint256', type: 'uint256' },
      {
        name: 'routes',
        internalType: 'struct Router.route[]',
        type: 'tuple[]',
        components: [
          { name: 'from', internalType: 'address', type: 'address' },
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'stable', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swapExactETHForTokensSupportingFeeOnTransferTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'amountOutMin', internalType: 'uint256', type: 'uint256' },
      {
        name: 'routes',
        internalType: 'struct Router.route[]',
        type: 'tuple[]',
        components: [
          { name: 'from', internalType: 'address', type: 'address' },
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'stable', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swapExactTokensForETH',
    outputs: [
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'amountOutMin', internalType: 'uint256', type: 'uint256' },
      {
        name: 'routes',
        internalType: 'struct Router.route[]',
        type: 'tuple[]',
        components: [
          { name: 'from', internalType: 'address', type: 'address' },
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'stable', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swapExactTokensForETHSupportingFeeOnTransferTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'amountOutMin', internalType: 'uint256', type: 'uint256' },
      {
        name: 'routes',
        internalType: 'struct Router.route[]',
        type: 'tuple[]',
        components: [
          { name: 'from', internalType: 'address', type: 'address' },
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'stable', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swapExactTokensForTokens',
    outputs: [
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'amountOutMin', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenFrom', internalType: 'address', type: 'address' },
      { name: 'tokenTo', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swapExactTokensForTokensSimple',
    outputs: [
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'amountOutMin', internalType: 'uint256', type: 'uint256' },
      {
        name: 'routes',
        internalType: 'struct Router.route[]',
        type: 'tuple[]',
        components: [
          { name: 'from', internalType: 'address', type: 'address' },
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'stable', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'weth',
    outputs: [{ name: '', internalType: 'contract IWETH', type: 'address' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const;

/**
 *
 */
export const routerAddress = {
  2222: '0xA7544C409d772944017BB95B99484B6E0d7B6388',
} as const;

/**
 *
 */
export const routerConfig = { address: routerAddress, abi: routerABI } as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RewardsDistributor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const rewardsDistributorABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_voting_escrow', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'time',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'tokens',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CheckpointToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'claim_epoch',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'max_epoch',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Claimed',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'checkpoint_token',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'checkpoint_total_supply',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'claim',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'claim_many',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'claimable',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'depositor',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'last_token_time',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_depositor', internalType: 'address', type: 'address' }],
    name: 'setDepositor',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'start_time',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'time_cursor',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'time_cursor_of',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'timestamp',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token_last_balance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'tokens_per_week',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'user_epoch_of',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 've_for_at',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 've_supply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'voting_escrow',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const;

/**
 *
 */
export const rewardsDistributorAddress = {
  2222: '0x8825be873e6578F1703628281600d5887C41C55A',
} as const;

/**
 *
 */
export const rewardsDistributorConfig = {
  address: rewardsDistributorAddress,
  abi: rewardsDistributorABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Library
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const libraryABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenIn', internalType: 'address', type: 'address' },
      { name: 'tokenOut', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
    ],
    name: 'getAmountOut',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenIn', internalType: 'address', type: 'address' },
      { name: 'tokenOut', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
    ],
    name: 'getMinimumValue',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenIn', internalType: 'address', type: 'address' },
      { name: 'tokenOut', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
    ],
    name: 'getSample',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenIn', internalType: 'address', type: 'address' },
      { name: 'tokenOut', internalType: 'address', type: 'address' },
      { name: 'stable', internalType: 'bool', type: 'bool' },
    ],
    name: 'getTradeDiff',
    outputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenIn', internalType: 'address', type: 'address' },
      { name: 'pair', internalType: 'address', type: 'address' },
    ],
    name: 'getTradeDiff',
    outputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const;

/**
 *
 */
export const libraryAddress = {
  2222: '0xFDEd8097db44B6cE7d5a2c9228f2A9f46ad66fb8',
} as const;

/**
 *
 */
export const libraryConfig = {
  address: libraryAddress,
  abi: libraryABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// WrappedExternalBribeFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const wrappedExternalBribeFactoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'existing_bribe', internalType: 'address', type: 'address' },
    ],
    name: 'createBribe',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'last_bribe',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'oldBribeToNew',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'voter',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const;

/**
 *
 */
export const wrappedExternalBribeFactoryAddress = {
  2222: '0x8af2f4Ae1DA95556fC1DaC3A74Cbf2E05e7006ab',
} as const;

/**
 *
 */
export const wrappedExternalBribeFactoryConfig = {
  address: wrappedExternalBribeFactoryAddress,
  abi: wrappedExternalBribeFactoryABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VeSplitter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const veSplitterABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'locks', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'split',
    outputs: [],
  },
] as const;

/**
 *
 */
export const veSplitterAddress = {
  2222: '0xe0c0183cFc43deF9dC302E1662964c06e8023Bde',
} as const;

/**
 *
 */
export const veSplitterConfig = {
  address: veSplitterAddress,
  abi: veSplitterABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// WrappedKava
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const wrappedKavaABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PauserAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PauserRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Unpaused',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ERR_INVALID_ZERO_VALUE',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ERR_NO_ERROR',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'addPauser',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'deposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'isPauser',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pause',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renouncePauser',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unpause',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdraw',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const;

/**
 *
 */
export const wrappedKavaAddress = {
  2222: '0xc86c7C0eFbd6A49B35E8714C5f59D99De09A225b',
} as const;

/**
 *
 */
export const wrappedKavaConfig = {
  address: wrappedKavaAddress,
  abi: wrappedKavaABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Erc20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', type: 'address' },
      { name: '_value', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: 'success', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', type: 'address' },
      { name: '_value', type: 'uint256' },
    ],
    name: 'showMeTheMoney',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', type: 'address' },
      { name: '_value', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: 'success', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', type: 'address' },
      { name: '_to', type: 'address' },
      { name: '_value', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: 'success', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_from', type: 'address', indexed: true },
      { name: '_to', type: 'address', indexed: true },
      { name: '_value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_owner', type: 'address', indexed: true },
      { name: '_spender', type: 'address', indexed: true },
      { name: '_value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_owner', type: 'address' },
      { name: '_spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: 'remaining', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_owner', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', type: 'uint256' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pair
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pairABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Burn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Fees',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Mint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0In',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1In',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount0Out',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1Out',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'reserve0',
        internalType: 'uint112',
        type: 'uint112',
        indexed: false,
      },
      {
        name: 'reserve1',
        internalType: 'uint112',
        type: 'uint112',
        indexed: false,
      },
    ],
    name: 'Sync',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MINIMUM_LIQUIDITY',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PERMIT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'blockTimestampLast',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'burn',
    outputs: [
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'claimFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'recipient', internalType: 'address', type: 'address' }],
    name: 'claimFeesFor',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'claimable0',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'claimable1',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'priceCumulativeStart',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'priceCumulativeEnd', internalType: 'uint256', type: 'uint256' },
      { name: 'timeElapsed', internalType: 'uint256', type: 'uint256' },
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'computeAmountOut',
    outputs: [{ name: 'amountOut', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenIn', internalType: 'address', type: 'address' },
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'current',
    outputs: [{ name: 'amountOut', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currentBlockTimestamp',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currentCumulativePrices',
    outputs: [
      { name: 'price0Cumulative', internalType: 'uint256', type: 'uint256' },
      { name: 'price1Cumulative', internalType: 'uint256', type: 'uint256' },
      { name: 'blockTimestamp', internalType: 'uint32', type: 'uint32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fees',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenIn', internalType: 'address', type: 'address' },
    ],
    name: 'getAmountOut',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getReserves',
    outputs: [
      { name: '_reserve0', internalType: 'uint112', type: 'uint112' },
      { name: '_reserve1', internalType: 'uint112', type: 'uint112' },
      { name: '_blockTimestampLast', internalType: 'uint32', type: 'uint32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'index0',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'index1',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastObservation',
    outputs: [
      {
        name: '',
        internalType: 'struct BaseV1Pair.Observation',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint32', type: 'uint32' },
          {
            name: 'price0Cumulative',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'price1Cumulative',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'mint',
    outputs: [{ name: 'liquidity', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'observationLength',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'observations',
    outputs: [
      { name: 'timestamp', internalType: 'uint32', type: 'uint32' },
      { name: 'price0Cumulative', internalType: 'uint256', type: 'uint256' },
      { name: 'price1Cumulative', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'periodSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'price0CumulativeLast',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'price1CumulativeLast',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenIn', internalType: 'address', type: 'address' },
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'points', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'prices',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenIn', internalType: 'address', type: 'address' },
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'granularity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quote',
    outputs: [{ name: 'amountOut', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve0',
    outputs: [{ name: '', internalType: 'uint112', type: 'uint112' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve0Last',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve1',
    outputs: [{ name: '', internalType: 'uint112', type: 'uint112' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve1Last',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenIn', internalType: 'address', type: 'address' },
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'points', internalType: 'uint256', type: 'uint256' },
      { name: 'window', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'sample',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'skim',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'supplyIndex0',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'supplyIndex1',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount0Out', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1Out', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'swap',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'sync',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'dst', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'src', internalType: 'address', type: 'address' },
      { name: 'dst', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Gauge
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const gaugeABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_stake', internalType: 'address', type: 'address' },
      { name: '_internal_bribe', internalType: 'address', type: 'address' },
      { name: '_external_bribe', internalType: 'address', type: 'address' },
      { name: '__ve', internalType: 'address', type: 'address' },
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_forPair', internalType: 'bool', type: 'bool' },
      {
        name: '_allowedRewardTokens',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'claimed0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'claimed1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ClaimFees',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'reward',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ClaimRewards',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'reward',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'NotifyReward',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdraw',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_ve',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'maxRuns', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchRewardPerToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'maxRuns', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchUpdateRewardPerToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'checkpoints',
    outputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'balanceOf', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'claimFees',
    outputs: [
      { name: 'claimed0', internalType: 'uint256', type: 'uint256' },
      { name: 'claimed1', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'depositAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'derivedBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'derivedBalances',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'derivedSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'earned',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'external_bribe',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fees0',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fees1',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPriorBalanceIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPriorRewardPerToken',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
    name: 'getPriorSupplyIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'tokens', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'getReward',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'internal_bribe',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isForPair',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isReward',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'lastEarn',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'lastTimeRewardApplicable',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'lastUpdateTime',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'left',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'notifyRewardAmount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'numCheckpoints',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'periodFinish',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'rewardPerToken',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'rewardPerTokenCheckpoints',
    outputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'rewardPerToken', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'rewardPerTokenNumCheckpoints',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'rewardPerTokenStored',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'rewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'rewards',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rewardsListLength',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stake',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'supplyCheckpoints',
    outputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'supply', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'supplyNumCheckpoints',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'i', internalType: 'uint256', type: 'uint256' },
      { name: 'oldToken', internalType: 'address', type: 'address' },
      { name: 'newToken', internalType: 'address', type: 'address' },
    ],
    name: 'swapOutRewardToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'tokenIds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'userRewardPerTokenStored',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'voter',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdraw',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdrawAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawToken',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Bribe
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bribeABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      {
        name: '_allowedRewardTokens',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'reward',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ClaimRewards',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'reward',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'epoch',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'NotifyReward',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdraw',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: '_deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_ve',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: '_withdraw',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'checkpoints',
    outputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'balanceOf', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'earned',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochStart',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPriorBalanceIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
    name: 'getPriorSupplyIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'tokens', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'getReward',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'tokens', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'getRewardForOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isReward',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lastEarn',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'lastTimeRewardApplicable',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'left',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'notifyRewardAmount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'numCheckpoints',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'periodFinish',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'rewards',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rewardsListLength',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'supplyCheckpoints',
    outputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'supply', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'supplyNumCheckpoints',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'i', internalType: 'uint256', type: 'uint256' },
      { name: 'oldToken', internalType: 'address', type: 'address' },
      { name: 'newToken', internalType: 'address', type: 'address' },
    ],
    name: 'swapOutRewardToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenRewardsPerEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'voter',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Core
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link veTokenABI}__.
 *
 *
 */
export function getVeToken(
  config: Omit<GetContractArgs, 'abi' | 'address'> & {
    chainId?: keyof typeof veTokenAddress;
  }
) {
  return getContract({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    ...config,
  });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link veTokenABI}__.
 *
 *
 */
export function readVeToken<
  TAbi extends readonly unknown[] = typeof veTokenABI,
  TFunctionName extends string = string
>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof veTokenAddress;
  }
) {
  return readContract({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link veTokenABI}__.
 *
 *
 */
export function writeVeToken<
  TFunctionName extends string,
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config:
    | (Omit<
        WriteContractPreparedArgs<typeof veTokenABI, TFunctionName>,
        'abi' | 'address'
      > & {
        mode: TMode;
        chainId?: TMode extends 'prepared'
          ? TChainId
          : keyof typeof veTokenAddress;
      })
    | (Omit<
        WriteContractUnpreparedArgs<typeof veTokenABI, TFunctionName>,
        'abi' | 'address'
      > & {
        mode: TMode;
        chainId?: TMode extends 'prepared'
          ? TChainId
          : keyof typeof veTokenAddress;
      })
) {
  return writeContract({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    ...config,
  } as unknown as WriteContractArgs<typeof veTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link veTokenABI}__.
 *
 *
 */
export function prepareWriteVeToken<
  TAbi extends readonly unknown[] = typeof veTokenABI,
  TFunctionName extends string = string
>(
  config: Omit<
    PrepareWriteContractConfig<TAbi, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof veTokenAddress }
) {
  return prepareWriteContract({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link veTokenABI}__.
 *
 *
 */
export function watchVeTokenEvent<
  TAbi extends readonly unknown[] = typeof veTokenABI,
  TEventName extends string = string
>(
  config: Omit<
    WatchContractEventConfig<TAbi, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof veTokenAddress },
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    {
      abi: veTokenABI,
      address: veTokenAddress[2222],
      ...config,
    } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link pairFactoryABI}__.
 *
 *
 */
export function getPairFactory(
  config: Omit<GetContractArgs, 'abi' | 'address'> & {
    chainId?: keyof typeof pairFactoryAddress;
  }
) {
  return getContract({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    ...config,
  });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link pairFactoryABI}__.
 *
 *
 */
export function readPairFactory<
  TAbi extends readonly unknown[] = typeof pairFactoryABI,
  TFunctionName extends string = string
>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof pairFactoryAddress;
  }
) {
  return readContract({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link pairFactoryABI}__.
 *
 *
 */
export function writePairFactory<
  TFunctionName extends string,
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof pairFactoryAddress
>(
  config:
    | (Omit<
        WriteContractPreparedArgs<typeof pairFactoryABI, TFunctionName>,
        'abi' | 'address'
      > & {
        mode: TMode;
        chainId?: TMode extends 'prepared'
          ? TChainId
          : keyof typeof pairFactoryAddress;
      })
    | (Omit<
        WriteContractUnpreparedArgs<typeof pairFactoryABI, TFunctionName>,
        'abi' | 'address'
      > & {
        mode: TMode;
        chainId?: TMode extends 'prepared'
          ? TChainId
          : keyof typeof pairFactoryAddress;
      })
) {
  return writeContract({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    ...config,
  } as unknown as WriteContractArgs<typeof pairFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link pairFactoryABI}__.
 *
 *
 */
export function prepareWritePairFactory<
  TAbi extends readonly unknown[] = typeof pairFactoryABI,
  TFunctionName extends string = string
>(
  config: Omit<
    PrepareWriteContractConfig<TAbi, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof pairFactoryAddress }
) {
  return prepareWriteContract({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link pairFactoryABI}__.
 *
 *
 */
export function watchPairFactoryEvent<
  TAbi extends readonly unknown[] = typeof pairFactoryABI,
  TEventName extends string = string
>(
  config: Omit<
    WatchContractEventConfig<TAbi, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof pairFactoryAddress },
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    {
      abi: pairFactoryABI,
      address: pairFactoryAddress[2222],
      ...config,
    } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link routerABI}__.
 *
 *
 */
export function getRouter(
  config: Omit<GetContractArgs, 'abi' | 'address'> & {
    chainId?: keyof typeof routerAddress;
  }
) {
  return getContract({
    abi: routerABI,
    address: routerAddress[2222],
    ...config,
  });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link routerABI}__.
 *
 *
 */
export function readRouter<
  TAbi extends readonly unknown[] = typeof routerABI,
  TFunctionName extends string = string
>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof routerAddress;
  }
) {
  return readContract({
    abi: routerABI,
    address: routerAddress[2222],
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link routerABI}__.
 *
 *
 */
export function writeRouter<
  TFunctionName extends string,
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof routerAddress
>(
  config:
    | (Omit<
        WriteContractPreparedArgs<typeof routerABI, TFunctionName>,
        'abi' | 'address'
      > & {
        mode: TMode;
        chainId?: TMode extends 'prepared'
          ? TChainId
          : keyof typeof routerAddress;
      })
    | (Omit<
        WriteContractUnpreparedArgs<typeof routerABI, TFunctionName>,
        'abi' | 'address'
      > & {
        mode: TMode;
        chainId?: TMode extends 'prepared'
          ? TChainId
          : keyof typeof routerAddress;
      })
) {
  return writeContract({
    abi: routerABI,
    address: routerAddress[2222],
    ...config,
  } as unknown as WriteContractArgs<typeof routerABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link routerABI}__.
 *
 *
 */
export function prepareWriteRouter<
  TAbi extends readonly unknown[] = typeof routerABI,
  TFunctionName extends string = string
>(
  config: Omit<
    PrepareWriteContractConfig<TAbi, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof routerAddress }
) {
  return prepareWriteContract({
    abi: routerABI,
    address: routerAddress[2222],
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link rewardsDistributorABI}__.
 *
 *
 */
export function getRewardsDistributor(
  config: Omit<GetContractArgs, 'abi' | 'address'> & {
    chainId?: keyof typeof rewardsDistributorAddress;
  }
) {
  return getContract({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    ...config,
  });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link rewardsDistributorABI}__.
 *
 *
 */
export function readRewardsDistributor<
  TAbi extends readonly unknown[] = typeof rewardsDistributorABI,
  TFunctionName extends string = string
>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof rewardsDistributorAddress;
  }
) {
  return readContract({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link rewardsDistributorABI}__.
 *
 *
 */
export function writeRewardsDistributor<
  TFunctionName extends string,
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof rewardsDistributorAddress
>(
  config:
    | (Omit<
        WriteContractPreparedArgs<typeof rewardsDistributorABI, TFunctionName>,
        'abi' | 'address'
      > & {
        mode: TMode;
        chainId?: TMode extends 'prepared'
          ? TChainId
          : keyof typeof rewardsDistributorAddress;
      })
    | (Omit<
        WriteContractUnpreparedArgs<
          typeof rewardsDistributorABI,
          TFunctionName
        >,
        'abi' | 'address'
      > & {
        mode: TMode;
        chainId?: TMode extends 'prepared'
          ? TChainId
          : keyof typeof rewardsDistributorAddress;
      })
) {
  return writeContract({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    ...config,
  } as unknown as WriteContractArgs<typeof rewardsDistributorABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link rewardsDistributorABI}__.
 *
 *
 */
export function prepareWriteRewardsDistributor<
  TAbi extends readonly unknown[] = typeof rewardsDistributorABI,
  TFunctionName extends string = string
>(
  config: Omit<
    PrepareWriteContractConfig<TAbi, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof rewardsDistributorAddress }
) {
  return prepareWriteContract({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link rewardsDistributorABI}__.
 *
 *
 */
export function watchRewardsDistributorEvent<
  TAbi extends readonly unknown[] = typeof rewardsDistributorABI,
  TEventName extends string = string
>(
  config: Omit<
    WatchContractEventConfig<TAbi, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof rewardsDistributorAddress },
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    {
      abi: rewardsDistributorABI,
      address: rewardsDistributorAddress[2222],
      ...config,
    } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link libraryABI}__.
 *
 *
 */
export function getLibrary(
  config: Omit<GetContractArgs, 'abi' | 'address'> & {
    chainId?: keyof typeof libraryAddress;
  }
) {
  return getContract({
    abi: libraryABI,
    address: libraryAddress[2222],
    ...config,
  });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link libraryABI}__.
 *
 *
 */
export function readLibrary<
  TAbi extends readonly unknown[] = typeof libraryABI,
  TFunctionName extends string = string
>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof libraryAddress;
  }
) {
  return readContract({
    abi: libraryABI,
    address: libraryAddress[2222],
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link wrappedExternalBribeFactoryABI}__.
 *
 *
 */
export function getWrappedExternalBribeFactory(
  config: Omit<GetContractArgs, 'abi' | 'address'> & {
    chainId?: keyof typeof wrappedExternalBribeFactoryAddress;
  }
) {
  return getContract({
    abi: wrappedExternalBribeFactoryABI,
    address: wrappedExternalBribeFactoryAddress[2222],
    ...config,
  });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link wrappedExternalBribeFactoryABI}__.
 *
 *
 */
export function readWrappedExternalBribeFactory<
  TAbi extends readonly unknown[] = typeof wrappedExternalBribeFactoryABI,
  TFunctionName extends string = string
>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof wrappedExternalBribeFactoryAddress;
  }
) {
  return readContract({
    abi: wrappedExternalBribeFactoryABI,
    address: wrappedExternalBribeFactoryAddress[2222],
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link wrappedExternalBribeFactoryABI}__.
 *
 *
 */
export function writeWrappedExternalBribeFactory<
  TFunctionName extends string,
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof wrappedExternalBribeFactoryAddress
>(
  config:
    | (Omit<
        WriteContractPreparedArgs<
          typeof wrappedExternalBribeFactoryABI,
          TFunctionName
        >,
        'abi' | 'address'
      > & {
        mode: TMode;
        chainId?: TMode extends 'prepared'
          ? TChainId
          : keyof typeof wrappedExternalBribeFactoryAddress;
      })
    | (Omit<
        WriteContractUnpreparedArgs<
          typeof wrappedExternalBribeFactoryABI,
          TFunctionName
        >,
        'abi' | 'address'
      > & {
        mode: TMode;
        chainId?: TMode extends 'prepared'
          ? TChainId
          : keyof typeof wrappedExternalBribeFactoryAddress;
      })
) {
  return writeContract({
    abi: wrappedExternalBribeFactoryABI,
    address: wrappedExternalBribeFactoryAddress[2222],
    ...config,
  } as unknown as WriteContractArgs<typeof wrappedExternalBribeFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link wrappedExternalBribeFactoryABI}__.
 *
 *
 */
export function prepareWriteWrappedExternalBribeFactory<
  TAbi extends readonly unknown[] = typeof wrappedExternalBribeFactoryABI,
  TFunctionName extends string = string
>(
  config: Omit<
    PrepareWriteContractConfig<TAbi, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof wrappedExternalBribeFactoryAddress }
) {
  return prepareWriteContract({
    abi: wrappedExternalBribeFactoryABI,
    address: wrappedExternalBribeFactoryAddress[2222],
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link veSplitterABI}__.
 *
 *
 */
export function getVeSplitter(
  config: Omit<GetContractArgs, 'abi' | 'address'> & {
    chainId?: keyof typeof veSplitterAddress;
  }
) {
  return getContract({
    abi: veSplitterABI,
    address: veSplitterAddress[2222],
    ...config,
  });
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link veSplitterABI}__.
 *
 *
 */
export function writeVeSplitter<
  TFunctionName extends string,
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof veSplitterAddress
>(
  config:
    | (Omit<
        WriteContractPreparedArgs<typeof veSplitterABI, TFunctionName>,
        'abi' | 'address'
      > & {
        mode: TMode;
        chainId?: TMode extends 'prepared'
          ? TChainId
          : keyof typeof veSplitterAddress;
      })
    | (Omit<
        WriteContractUnpreparedArgs<typeof veSplitterABI, TFunctionName>,
        'abi' | 'address'
      > & {
        mode: TMode;
        chainId?: TMode extends 'prepared'
          ? TChainId
          : keyof typeof veSplitterAddress;
      })
) {
  return writeContract({
    abi: veSplitterABI,
    address: veSplitterAddress[2222],
    ...config,
  } as unknown as WriteContractArgs<typeof veSplitterABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link veSplitterABI}__.
 *
 *
 */
export function prepareWriteVeSplitter<
  TAbi extends readonly unknown[] = typeof veSplitterABI,
  TFunctionName extends string = string
>(
  config: Omit<
    PrepareWriteContractConfig<TAbi, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof veSplitterAddress }
) {
  return prepareWriteContract({
    abi: veSplitterABI,
    address: veSplitterAddress[2222],
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link wrappedKavaABI}__.
 *
 *
 */
export function getWrappedKava(
  config: Omit<GetContractArgs, 'abi' | 'address'> & {
    chainId?: keyof typeof wrappedKavaAddress;
  }
) {
  return getContract({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    ...config,
  });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link wrappedKavaABI}__.
 *
 *
 */
export function readWrappedKava<
  TAbi extends readonly unknown[] = typeof wrappedKavaABI,
  TFunctionName extends string = string
>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof wrappedKavaAddress;
  }
) {
  return readContract({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link wrappedKavaABI}__.
 *
 *
 */
export function writeWrappedKava<
  TFunctionName extends string,
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof wrappedKavaAddress
>(
  config:
    | (Omit<
        WriteContractPreparedArgs<typeof wrappedKavaABI, TFunctionName>,
        'abi' | 'address'
      > & {
        mode: TMode;
        chainId?: TMode extends 'prepared'
          ? TChainId
          : keyof typeof wrappedKavaAddress;
      })
    | (Omit<
        WriteContractUnpreparedArgs<typeof wrappedKavaABI, TFunctionName>,
        'abi' | 'address'
      > & {
        mode: TMode;
        chainId?: TMode extends 'prepared'
          ? TChainId
          : keyof typeof wrappedKavaAddress;
      })
) {
  return writeContract({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    ...config,
  } as unknown as WriteContractArgs<typeof wrappedKavaABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link wrappedKavaABI}__.
 *
 *
 */
export function prepareWriteWrappedKava<
  TAbi extends readonly unknown[] = typeof wrappedKavaABI,
  TFunctionName extends string = string
>(
  config: Omit<
    PrepareWriteContractConfig<TAbi, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof wrappedKavaAddress }
) {
  return prepareWriteContract({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link wrappedKavaABI}__.
 *
 *
 */
export function watchWrappedKavaEvent<
  TAbi extends readonly unknown[] = typeof wrappedKavaABI,
  TEventName extends string = string
>(
  config: Omit<
    WatchContractEventConfig<TAbi, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof wrappedKavaAddress },
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    {
      abi: wrappedKavaABI,
      address: wrappedKavaAddress[2222],
      ...config,
    } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function getErc20(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: erc20ABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function readErc20<
  TAbi extends readonly unknown[] = typeof erc20ABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: erc20ABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function writeErc20<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof erc20ABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof erc20ABI, TFunctionName>, 'abi'>
) {
  return writeContract({
    abi: erc20ABI,
    ...config,
  } as unknown as WriteContractArgs<typeof erc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function prepareWriteErc20<
  TAbi extends readonly unknown[] = typeof erc20ABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: erc20ABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function watchErc20Event<
  TAbi extends readonly unknown[] = typeof erc20ABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    { abi: erc20ABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link pairABI}__.
 */
export function getPair(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: pairABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link pairABI}__.
 */
export function readPair<
  TAbi extends readonly unknown[] = typeof pairABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: pairABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link pairABI}__.
 */
export function writePair<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof pairABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof pairABI, TFunctionName>, 'abi'>
) {
  return writeContract({
    abi: pairABI,
    ...config,
  } as unknown as WriteContractArgs<typeof pairABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link pairABI}__.
 */
export function prepareWritePair<
  TAbi extends readonly unknown[] = typeof pairABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: pairABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link pairABI}__.
 */
export function watchPairEvent<
  TAbi extends readonly unknown[] = typeof pairABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    { abi: pairABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link gaugeABI}__.
 */
export function getGauge(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: gaugeABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link gaugeABI}__.
 */
export function readGauge<
  TAbi extends readonly unknown[] = typeof gaugeABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: gaugeABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link gaugeABI}__.
 */
export function writeGauge<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof gaugeABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof gaugeABI, TFunctionName>, 'abi'>
) {
  return writeContract({
    abi: gaugeABI,
    ...config,
  } as unknown as WriteContractArgs<typeof gaugeABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link gaugeABI}__.
 */
export function prepareWriteGauge<
  TAbi extends readonly unknown[] = typeof gaugeABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: gaugeABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link gaugeABI}__.
 */
export function watchGaugeEvent<
  TAbi extends readonly unknown[] = typeof gaugeABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    { abi: gaugeABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link bribeABI}__.
 */
export function getBribe(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: bribeABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link bribeABI}__.
 */
export function readBribe<
  TAbi extends readonly unknown[] = typeof bribeABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: bribeABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link bribeABI}__.
 */
export function writeBribe<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof bribeABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof bribeABI, TFunctionName>, 'abi'>
) {
  return writeContract({
    abi: bribeABI,
    ...config,
  } as unknown as WriteContractArgs<typeof bribeABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link bribeABI}__.
 */
export function prepareWriteBribe<
  TAbi extends readonly unknown[] = typeof bribeABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: bribeABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link bribeABI}__.
 */
export function watchBribeEvent<
  TAbi extends readonly unknown[] = typeof bribeABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    { abi: bribeABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  );
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__.
 *
 *
 */
export function useVeTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"DELEGATION_TYPEHASH"`.
 *
 *
 */
export function useVeTokenDelegationTypehash<
  TFunctionName extends 'DELEGATION_TYPEHASH',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'DELEGATION_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"DOMAIN_TYPEHASH"`.
 *
 *
 */
export function useVeTokenDomainTypehash<
  TFunctionName extends 'DOMAIN_TYPEHASH',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'DOMAIN_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"MAX_DELEGATES"`.
 *
 *
 */
export function useVeTokenMaxDelegates<
  TFunctionName extends 'MAX_DELEGATES',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'MAX_DELEGATES',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"artProxy"`.
 *
 *
 */
export function useVeTokenArtProxy<
  TFunctionName extends 'artProxy',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'artProxy',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"attachments"`.
 *
 *
 */
export function useVeTokenAttachments<
  TFunctionName extends 'attachments',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'attachments',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"balanceOf"`.
 *
 *
 */
export function useVeTokenBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"balanceOfAtNFT"`.
 *
 *
 */
export function useVeTokenBalanceOfAtNft<
  TFunctionName extends 'balanceOfAtNFT',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'balanceOfAtNFT',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"balanceOfNFT"`.
 *
 *
 */
export function useVeTokenBalanceOfNft<
  TFunctionName extends 'balanceOfNFT',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'balanceOfNFT',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"balanceOfNFTAt"`.
 *
 *
 */
export function useVeTokenBalanceOfNftAt<
  TFunctionName extends 'balanceOfNFTAt',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'balanceOfNFTAt',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"block_number"`.
 *
 *
 */
export function useVeTokenBlockNumber<
  TFunctionName extends 'block_number',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'block_number',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"checkpoints"`.
 *
 *
 */
export function useVeTokenCheckpoints<
  TFunctionName extends 'checkpoints',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'checkpoints',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"decimals"`.
 *
 *
 */
export function useVeTokenDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"delegates"`.
 *
 *
 */
export function useVeTokenDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"epoch"`.
 *
 *
 */
export function useVeTokenEpoch<
  TFunctionName extends 'epoch',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'epoch',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"getApproved"`.
 *
 *
 */
export function useVeTokenGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"getPastTotalSupply"`.
 *
 *
 */
export function useVeTokenGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"getPastVotes"`.
 *
 *
 */
export function useVeTokenGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"getPastVotesIndex"`.
 *
 *
 */
export function useVeTokenGetPastVotesIndex<
  TFunctionName extends 'getPastVotesIndex',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'getPastVotesIndex',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"getVotes"`.
 *
 *
 */
export function useVeTokenGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"get_last_user_slope"`.
 *
 *
 */
export function useVeTokenGetLastUserSlope<
  TFunctionName extends 'get_last_user_slope',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'get_last_user_slope',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 *
 */
export function useVeTokenIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"isApprovedOrOwner"`.
 *
 *
 */
export function useVeTokenIsApprovedOrOwner<
  TFunctionName extends 'isApprovedOrOwner',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'isApprovedOrOwner',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"locked"`.
 *
 *
 */
export function useVeTokenLocked<
  TFunctionName extends 'locked',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'locked',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"locked__end"`.
 *
 *
 */
export function useVeTokenLockedEnd<
  TFunctionName extends 'locked__end',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'locked__end',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"name"`.
 *
 *
 */
export function useVeTokenName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"nonces"`.
 *
 *
 */
export function useVeTokenNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"numCheckpoints"`.
 *
 *
 */
export function useVeTokenNumCheckpoints<
  TFunctionName extends 'numCheckpoints',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'numCheckpoints',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"ownerOf"`.
 *
 *
 */
export function useVeTokenOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"ownership_change"`.
 *
 *
 */
export function useVeTokenOwnershipChange<
  TFunctionName extends 'ownership_change',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'ownership_change',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"point_history"`.
 *
 *
 */
export function useVeTokenPointHistory<
  TFunctionName extends 'point_history',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'point_history',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"slope_changes"`.
 *
 *
 */
export function useVeTokenSlopeChanges<
  TFunctionName extends 'slope_changes',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'slope_changes',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"supply"`.
 *
 *
 */
export function useVeTokenSupply<
  TFunctionName extends 'supply',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'supply',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"supportsInterface"`.
 *
 *
 */
export function useVeTokenSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"symbol"`.
 *
 *
 */
export function useVeTokenSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"team"`.
 *
 *
 */
export function useVeTokenTeam<
  TFunctionName extends 'team',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'team',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"token"`.
 *
 *
 */
export function useVeTokenToken<
  TFunctionName extends 'token',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 *
 *
 */
export function useVeTokenTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"tokenURI"`.
 *
 *
 */
export function useVeTokenTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"totalSupply"`.
 *
 *
 */
export function useVeTokenTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"totalSupplyAt"`.
 *
 *
 */
export function useVeTokenTotalSupplyAt<
  TFunctionName extends 'totalSupplyAt',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'totalSupplyAt',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"totalSupplyAtT"`.
 *
 *
 */
export function useVeTokenTotalSupplyAtT<
  TFunctionName extends 'totalSupplyAtT',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'totalSupplyAtT',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"user_point_epoch"`.
 *
 *
 */
export function useVeTokenUserPointEpoch<
  TFunctionName extends 'user_point_epoch',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'user_point_epoch',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"user_point_history"`.
 *
 *
 */
export function useVeTokenUserPointHistory<
  TFunctionName extends 'user_point_history',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'user_point_history',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"user_point_history__ts"`.
 *
 *
 */
export function useVeTokenUserPointHistoryTs<
  TFunctionName extends 'user_point_history__ts',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'user_point_history__ts',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"version"`.
 *
 *
 */
export function useVeTokenVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"voted"`.
 *
 *
 */
export function useVeTokenVoted<
  TFunctionName extends 'voted',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'voted',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"voter"`.
 *
 *
 */
export function useVeTokenVoter<
  TFunctionName extends 'voter',
  TSelectData = ReadContractResult<typeof veTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractRead({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'voter',
    ...config,
  } as UseContractReadConfig<typeof veTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__.
 *
 *
 */
export function useVeTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof veTokenABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof veTokenABI, TFunctionName, TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, TFunctionName, TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"abstain"`.
 *
 *
 */
export function useVeTokenAbstain<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'abstain'
        >['request']['abi'],
        'abstain',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'abstain' }
    : UseContractWriteConfig<typeof veTokenABI, 'abstain', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'abstain';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'abstain', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'abstain',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"approve"`.
 *
 *
 */
export function useVeTokenApprove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<typeof veTokenABI, 'approve', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'approve', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"attach"`.
 *
 *
 */
export function useVeTokenAttach<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'attach'
        >['request']['abi'],
        'attach',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'attach' }
    : UseContractWriteConfig<typeof veTokenABI, 'attach', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'attach';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'attach', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'attach',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"checkpoint"`.
 *
 *
 */
export function useVeTokenCheckpoint<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'checkpoint'
        >['request']['abi'],
        'checkpoint',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'checkpoint' }
    : UseContractWriteConfig<typeof veTokenABI, 'checkpoint', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'checkpoint';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'checkpoint', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'checkpoint',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"create_lock"`.
 *
 *
 */
export function useVeTokenCreateLock<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'create_lock'
        >['request']['abi'],
        'create_lock',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'create_lock';
      }
    : UseContractWriteConfig<typeof veTokenABI, 'create_lock', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'create_lock';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'create_lock', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'create_lock',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"create_lock_for"`.
 *
 *
 */
export function useVeTokenCreateLockFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'create_lock_for'
        >['request']['abi'],
        'create_lock_for',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'create_lock_for';
      }
    : UseContractWriteConfig<typeof veTokenABI, 'create_lock_for', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'create_lock_for';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'create_lock_for', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'create_lock_for',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"delegate"`.
 *
 *
 */
export function useVeTokenDelegate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'delegate'
        >['request']['abi'],
        'delegate',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'delegate' }
    : UseContractWriteConfig<typeof veTokenABI, 'delegate', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'delegate';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'delegate', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'delegate',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"delegateBySig"`.
 *
 *
 */
export function useVeTokenDelegateBySig<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'delegateBySig'
        >['request']['abi'],
        'delegateBySig',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'delegateBySig';
      }
    : UseContractWriteConfig<typeof veTokenABI, 'delegateBySig', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'delegateBySig';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'delegateBySig', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'delegateBySig',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"deposit_for"`.
 *
 *
 */
export function useVeTokenDepositFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'deposit_for'
        >['request']['abi'],
        'deposit_for',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'deposit_for';
      }
    : UseContractWriteConfig<typeof veTokenABI, 'deposit_for', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'deposit_for';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'deposit_for', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'deposit_for',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"detach"`.
 *
 *
 */
export function useVeTokenDetach<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'detach'
        >['request']['abi'],
        'detach',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'detach' }
    : UseContractWriteConfig<typeof veTokenABI, 'detach', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'detach';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'detach', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'detach',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"increase_amount"`.
 *
 *
 */
export function useVeTokenIncreaseAmount<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'increase_amount'
        >['request']['abi'],
        'increase_amount',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'increase_amount';
      }
    : UseContractWriteConfig<typeof veTokenABI, 'increase_amount', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'increase_amount';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'increase_amount', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'increase_amount',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"increase_unlock_time"`.
 *
 *
 */
export function useVeTokenIncreaseUnlockTime<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'increase_unlock_time'
        >['request']['abi'],
        'increase_unlock_time',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'increase_unlock_time';
      }
    : UseContractWriteConfig<
        typeof veTokenABI,
        'increase_unlock_time',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'increase_unlock_time';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'increase_unlock_time', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'increase_unlock_time',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"merge"`.
 *
 *
 */
export function useVeTokenMerge<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'merge'
        >['request']['abi'],
        'merge',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'merge' }
    : UseContractWriteConfig<typeof veTokenABI, 'merge', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'merge';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'merge', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'merge',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 *
 */
export function useVeTokenSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'safeTransferFrom';
      }
    : UseContractWriteConfig<typeof veTokenABI, 'safeTransferFrom', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'safeTransferFrom', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'safeTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 *
 */
export function useVeTokenSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'setApprovalForAll';
      }
    : UseContractWriteConfig<typeof veTokenABI, 'setApprovalForAll', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'setApprovalForAll', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'setApprovalForAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"setArtProxy"`.
 *
 *
 */
export function useVeTokenSetArtProxy<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'setArtProxy'
        >['request']['abi'],
        'setArtProxy',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'setArtProxy';
      }
    : UseContractWriteConfig<typeof veTokenABI, 'setArtProxy', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setArtProxy';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'setArtProxy', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'setArtProxy',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"setTeam"`.
 *
 *
 */
export function useVeTokenSetTeam<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'setTeam'
        >['request']['abi'],
        'setTeam',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setTeam' }
    : UseContractWriteConfig<typeof veTokenABI, 'setTeam', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setTeam';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'setTeam', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'setTeam',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"setVoter"`.
 *
 *
 */
export function useVeTokenSetVoter<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'setVoter'
        >['request']['abi'],
        'setVoter',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setVoter' }
    : UseContractWriteConfig<typeof veTokenABI, 'setVoter', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setVoter';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'setVoter', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'setVoter',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"transferFrom"`.
 *
 *
 */
export function useVeTokenTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'transferFrom';
      }
    : UseContractWriteConfig<typeof veTokenABI, 'transferFrom', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'transferFrom', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"voting"`.
 *
 *
 */
export function useVeTokenVoting<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'voting'
        >['request']['abi'],
        'voting',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'voting' }
    : UseContractWriteConfig<typeof veTokenABI, 'voting', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'voting';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'voting', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'voting',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"withdraw"`.
 *
 *
 */
export function useVeTokenWithdraw<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veTokenABI,
          'withdraw'
        >['request']['abi'],
        'withdraw',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof veTokenABI, 'withdraw', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'withdraw';
      } = {} as any
) {
  return useContractWrite<typeof veTokenABI, 'withdraw', TMode>({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'withdraw',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__.
 *
 *
 */
export function usePrepareVeTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"abstain"`.
 *
 *
 */
export function usePrepareVeTokenAbstain(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'abstain'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'abstain',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'abstain'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"approve"`.
 *
 *
 */
export function usePrepareVeTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"attach"`.
 *
 *
 */
export function usePrepareVeTokenAttach(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'attach'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'attach',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'attach'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"checkpoint"`.
 *
 *
 */
export function usePrepareVeTokenCheckpoint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'checkpoint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'checkpoint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'checkpoint'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"create_lock"`.
 *
 *
 */
export function usePrepareVeTokenCreateLock(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'create_lock'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'create_lock',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'create_lock'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"create_lock_for"`.
 *
 *
 */
export function usePrepareVeTokenCreateLockFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'create_lock_for'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'create_lock_for',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'create_lock_for'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"delegate"`.
 *
 *
 */
export function usePrepareVeTokenDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'delegate'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'delegate'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"delegateBySig"`.
 *
 *
 */
export function usePrepareVeTokenDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'delegateBySig'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'delegateBySig'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"deposit_for"`.
 *
 *
 */
export function usePrepareVeTokenDepositFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'deposit_for'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'deposit_for',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'deposit_for'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"detach"`.
 *
 *
 */
export function usePrepareVeTokenDetach(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'detach'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'detach',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'detach'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"increase_amount"`.
 *
 *
 */
export function usePrepareVeTokenIncreaseAmount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'increase_amount'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'increase_amount',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'increase_amount'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"increase_unlock_time"`.
 *
 *
 */
export function usePrepareVeTokenIncreaseUnlockTime(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'increase_unlock_time'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'increase_unlock_time',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'increase_unlock_time'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"merge"`.
 *
 *
 */
export function usePrepareVeTokenMerge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'merge'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'merge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'merge'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 *
 */
export function usePrepareVeTokenSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'safeTransferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 *
 */
export function usePrepareVeTokenSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'setApprovalForAll'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"setArtProxy"`.
 *
 *
 */
export function usePrepareVeTokenSetArtProxy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'setArtProxy'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'setArtProxy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'setArtProxy'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"setTeam"`.
 *
 *
 */
export function usePrepareVeTokenSetTeam(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'setTeam'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'setTeam',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'setTeam'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"setVoter"`.
 *
 *
 */
export function usePrepareVeTokenSetVoter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'setVoter'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'setVoter',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'setVoter'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"transferFrom"`.
 *
 *
 */
export function usePrepareVeTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'transferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"voting"`.
 *
 *
 */
export function usePrepareVeTokenVoting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'voting'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'voting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'voting'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veTokenABI}__ and `functionName` set to `"withdraw"`.
 *
 *
 */
export function usePrepareVeTokenWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veTokenABI, 'withdraw'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veTokenABI, 'withdraw'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veTokenABI}__.
 *
 *
 */
export function useVeTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof veTokenABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    ...config,
  } as UseContractEventConfig<typeof veTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veTokenABI}__ and `eventName` set to `"Approval"`.
 *
 *
 */
export function useVeTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof veTokenABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof veTokenABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veTokenABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 *
 */
export function useVeTokenApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof veTokenABI, 'ApprovalForAll'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof veTokenABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veTokenABI}__ and `eventName` set to `"DelegateChanged"`.
 *
 *
 */
export function useVeTokenDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof veTokenABI, 'DelegateChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof veTokenABI, 'DelegateChanged'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veTokenABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 *
 *
 */
export function useVeTokenDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof veTokenABI, 'DelegateVotesChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof veTokenABI, 'DelegateVotesChanged'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veTokenABI}__ and `eventName` set to `"Deposit"`.
 *
 *
 */
export function useVeTokenDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof veTokenABI, 'Deposit'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<typeof veTokenABI, 'Deposit'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veTokenABI}__ and `eventName` set to `"Supply"`.
 *
 *
 */
export function useVeTokenSupplyEvent(
  config: Omit<
    UseContractEventConfig<typeof veTokenABI, 'Supply'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    eventName: 'Supply',
    ...config,
  } as UseContractEventConfig<typeof veTokenABI, 'Supply'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veTokenABI}__ and `eventName` set to `"Transfer"`.
 *
 *
 */
export function useVeTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof veTokenABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof veTokenABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veTokenABI}__ and `eventName` set to `"Withdraw"`.
 *
 *
 */
export function useVeTokenWithdrawEvent(
  config: Omit<
    UseContractEventConfig<typeof veTokenABI, 'Withdraw'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof veTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: veTokenABI,
    address: veTokenAddress[2222],
    eventName: 'Withdraw',
    ...config,
  } as UseContractEventConfig<typeof veTokenABI, 'Withdraw'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairFactoryABI}__.
 *
 *
 */
export function usePairFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pairFactoryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    ...config,
  } as UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"MAX_FEE"`.
 *
 *
 */
export function usePairFactoryMaxFee<
  TFunctionName extends 'MAX_FEE',
  TSelectData = ReadContractResult<typeof pairFactoryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'MAX_FEE',
    ...config,
  } as UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"allPairs"`.
 *
 *
 */
export function usePairFactoryAllPairs<
  TFunctionName extends 'allPairs',
  TSelectData = ReadContractResult<typeof pairFactoryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'allPairs',
    ...config,
  } as UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"allPairsLength"`.
 *
 *
 */
export function usePairFactoryAllPairsLength<
  TFunctionName extends 'allPairsLength',
  TSelectData = ReadContractResult<typeof pairFactoryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'allPairsLength',
    ...config,
  } as UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"feeManager"`.
 *
 *
 */
export function usePairFactoryFeeManager<
  TFunctionName extends 'feeManager',
  TSelectData = ReadContractResult<typeof pairFactoryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'feeManager',
    ...config,
  } as UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"getFee"`.
 *
 *
 */
export function usePairFactoryGetFee<
  TFunctionName extends 'getFee',
  TSelectData = ReadContractResult<typeof pairFactoryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'getFee',
    ...config,
  } as UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"getInitializable"`.
 *
 *
 */
export function usePairFactoryGetInitializable<
  TFunctionName extends 'getInitializable',
  TSelectData = ReadContractResult<typeof pairFactoryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'getInitializable',
    ...config,
  } as UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"getPair"`.
 *
 *
 */
export function usePairFactoryGetPair<
  TFunctionName extends 'getPair',
  TSelectData = ReadContractResult<typeof pairFactoryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'getPair',
    ...config,
  } as UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"isPair"`.
 *
 *
 */
export function usePairFactoryIsPair<
  TFunctionName extends 'isPair',
  TSelectData = ReadContractResult<typeof pairFactoryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'isPair',
    ...config,
  } as UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"isPaused"`.
 *
 *
 */
export function usePairFactoryIsPaused<
  TFunctionName extends 'isPaused',
  TSelectData = ReadContractResult<typeof pairFactoryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'isPaused',
    ...config,
  } as UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"pairCodeHash"`.
 *
 *
 */
export function usePairFactoryPairCodeHash<
  TFunctionName extends 'pairCodeHash',
  TSelectData = ReadContractResult<typeof pairFactoryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'pairCodeHash',
    ...config,
  } as UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"pauser"`.
 *
 *
 */
export function usePairFactoryPauser<
  TFunctionName extends 'pauser',
  TSelectData = ReadContractResult<typeof pairFactoryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'pauser',
    ...config,
  } as UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"pendingFeeManager"`.
 *
 *
 */
export function usePairFactoryPendingFeeManager<
  TFunctionName extends 'pendingFeeManager',
  TSelectData = ReadContractResult<typeof pairFactoryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'pendingFeeManager',
    ...config,
  } as UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"pendingPauser"`.
 *
 *
 */
export function usePairFactoryPendingPauser<
  TFunctionName extends 'pendingPauser',
  TSelectData = ReadContractResult<typeof pairFactoryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'pendingPauser',
    ...config,
  } as UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"stableFee"`.
 *
 *
 */
export function usePairFactoryStableFee<
  TFunctionName extends 'stableFee',
  TSelectData = ReadContractResult<typeof pairFactoryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'stableFee',
    ...config,
  } as UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"volatileFee"`.
 *
 *
 */
export function usePairFactoryVolatileFee<
  TFunctionName extends 'volatileFee',
  TSelectData = ReadContractResult<typeof pairFactoryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'volatileFee',
    ...config,
  } as UseContractReadConfig<typeof pairFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairFactoryABI}__.
 *
 *
 */
export function usePairFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pairFactoryAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairFactoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof pairFactoryABI, TFunctionName, TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any
) {
  return useContractWrite<typeof pairFactoryABI, TFunctionName, TMode>({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"acceptFeeManager"`.
 *
 *
 */
export function usePairFactoryAcceptFeeManager<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pairFactoryAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairFactoryABI,
          'acceptFeeManager'
        >['request']['abi'],
        'acceptFeeManager',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'acceptFeeManager';
      }
    : UseContractWriteConfig<
        typeof pairFactoryABI,
        'acceptFeeManager',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'acceptFeeManager';
      } = {} as any
) {
  return useContractWrite<typeof pairFactoryABI, 'acceptFeeManager', TMode>({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'acceptFeeManager',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"acceptPauser"`.
 *
 *
 */
export function usePairFactoryAcceptPauser<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pairFactoryAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairFactoryABI,
          'acceptPauser'
        >['request']['abi'],
        'acceptPauser',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'acceptPauser';
      }
    : UseContractWriteConfig<typeof pairFactoryABI, 'acceptPauser', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'acceptPauser';
      } = {} as any
) {
  return useContractWrite<typeof pairFactoryABI, 'acceptPauser', TMode>({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'acceptPauser',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"createPair"`.
 *
 *
 */
export function usePairFactoryCreatePair<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pairFactoryAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairFactoryABI,
          'createPair'
        >['request']['abi'],
        'createPair',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'createPair' }
    : UseContractWriteConfig<typeof pairFactoryABI, 'createPair', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'createPair';
      } = {} as any
) {
  return useContractWrite<typeof pairFactoryABI, 'createPair', TMode>({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'createPair',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"setFee"`.
 *
 *
 */
export function usePairFactorySetFee<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pairFactoryAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairFactoryABI,
          'setFee'
        >['request']['abi'],
        'setFee',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setFee' }
    : UseContractWriteConfig<typeof pairFactoryABI, 'setFee', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setFee';
      } = {} as any
) {
  return useContractWrite<typeof pairFactoryABI, 'setFee', TMode>({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'setFee',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"setFeeManager"`.
 *
 *
 */
export function usePairFactorySetFeeManager<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pairFactoryAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairFactoryABI,
          'setFeeManager'
        >['request']['abi'],
        'setFeeManager',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'setFeeManager';
      }
    : UseContractWriteConfig<typeof pairFactoryABI, 'setFeeManager', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setFeeManager';
      } = {} as any
) {
  return useContractWrite<typeof pairFactoryABI, 'setFeeManager', TMode>({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'setFeeManager',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"setPause"`.
 *
 *
 */
export function usePairFactorySetPause<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pairFactoryAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairFactoryABI,
          'setPause'
        >['request']['abi'],
        'setPause',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setPause' }
    : UseContractWriteConfig<typeof pairFactoryABI, 'setPause', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setPause';
      } = {} as any
) {
  return useContractWrite<typeof pairFactoryABI, 'setPause', TMode>({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'setPause',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"setPauser"`.
 *
 *
 */
export function usePairFactorySetPauser<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pairFactoryAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairFactoryABI,
          'setPauser'
        >['request']['abi'],
        'setPauser',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setPauser' }
    : UseContractWriteConfig<typeof pairFactoryABI, 'setPauser', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setPauser';
      } = {} as any
) {
  return useContractWrite<typeof pairFactoryABI, 'setPauser', TMode>({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'setPauser',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairFactoryABI}__.
 *
 *
 */
export function usePreparePairFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairFactoryABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"acceptFeeManager"`.
 *
 *
 */
export function usePreparePairFactoryAcceptFeeManager(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairFactoryABI, 'acceptFeeManager'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'acceptFeeManager',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairFactoryABI, 'acceptFeeManager'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"acceptPauser"`.
 *
 *
 */
export function usePreparePairFactoryAcceptPauser(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairFactoryABI, 'acceptPauser'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'acceptPauser',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairFactoryABI, 'acceptPauser'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"createPair"`.
 *
 *
 */
export function usePreparePairFactoryCreatePair(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairFactoryABI, 'createPair'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'createPair',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairFactoryABI, 'createPair'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"setFee"`.
 *
 *
 */
export function usePreparePairFactorySetFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairFactoryABI, 'setFee'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'setFee',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairFactoryABI, 'setFee'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"setFeeManager"`.
 *
 *
 */
export function usePreparePairFactorySetFeeManager(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairFactoryABI, 'setFeeManager'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'setFeeManager',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairFactoryABI, 'setFeeManager'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"setPause"`.
 *
 *
 */
export function usePreparePairFactorySetPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairFactoryABI, 'setPause'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'setPause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairFactoryABI, 'setPause'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairFactoryABI}__ and `functionName` set to `"setPauser"`.
 *
 *
 */
export function usePreparePairFactorySetPauser(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairFactoryABI, 'setPauser'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    functionName: 'setPauser',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairFactoryABI, 'setPauser'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairFactoryABI}__.
 *
 *
 */
export function usePairFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pairFactoryABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractEvent({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    ...config,
  } as UseContractEventConfig<typeof pairFactoryABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairFactoryABI}__ and `eventName` set to `"PairCreated"`.
 *
 *
 */
export function usePairFactoryPairCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof pairFactoryABI, 'PairCreated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof pairFactoryAddress } = {} as any
) {
  return useContractEvent({
    abi: pairFactoryABI,
    address: pairFactoryAddress[2222],
    eventName: 'PairCreated',
    ...config,
  } as UseContractEventConfig<typeof pairFactoryABI, 'PairCreated'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__.
 *
 *
 */
export function useRouterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return useContractRead({
    abi: routerABI,
    address: routerAddress[2222],
    ...config,
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"factory"`.
 *
 *
 */
export function useRouterFactory<
  TFunctionName extends 'factory',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return useContractRead({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"getAmountOut"`.
 *
 *
 */
export function useRouterGetAmountOut<
  TFunctionName extends 'getAmountOut',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return useContractRead({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'getAmountOut',
    ...config,
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"getAmountsOut"`.
 *
 *
 */
export function useRouterGetAmountsOut<
  TFunctionName extends 'getAmountsOut',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return useContractRead({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'getAmountsOut',
    ...config,
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"getReserves"`.
 *
 *
 */
export function useRouterGetReserves<
  TFunctionName extends 'getReserves',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return useContractRead({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'getReserves',
    ...config,
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"isPair"`.
 *
 *
 */
export function useRouterIsPair<
  TFunctionName extends 'isPair',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return useContractRead({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'isPair',
    ...config,
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"pairFor"`.
 *
 *
 */
export function useRouterPairFor<
  TFunctionName extends 'pairFor',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return useContractRead({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'pairFor',
    ...config,
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"quoteAddLiquidity"`.
 *
 *
 */
export function useRouterQuoteAddLiquidity<
  TFunctionName extends 'quoteAddLiquidity',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return useContractRead({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'quoteAddLiquidity',
    ...config,
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"quoteRemoveLiquidity"`.
 *
 *
 */
export function useRouterQuoteRemoveLiquidity<
  TFunctionName extends 'quoteRemoveLiquidity',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return useContractRead({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'quoteRemoveLiquidity',
    ...config,
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"sortTokens"`.
 *
 *
 */
export function useRouterSortTokens<
  TFunctionName extends 'sortTokens',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return useContractRead({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'sortTokens',
    ...config,
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"weth"`.
 *
 *
 */
export function useRouterWeth<
  TFunctionName extends 'weth',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return useContractRead({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'weth',
    ...config,
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__.
 *
 *
 */
export function useRouterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof routerAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof routerABI, TFunctionName, TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any
) {
  return useContractWrite<typeof routerABI, TFunctionName, TMode>({
    abi: routerABI,
    address: routerAddress[2222],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"UNSAFE_swapExactTokensForTokens"`.
 *
 *
 */
export function useRouterUnsafeSwapExactTokensForTokens<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof routerAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof routerABI,
          'UNSAFE_swapExactTokensForTokens'
        >['request']['abi'],
        'UNSAFE_swapExactTokensForTokens',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'UNSAFE_swapExactTokensForTokens';
      }
    : UseContractWriteConfig<
        typeof routerABI,
        'UNSAFE_swapExactTokensForTokens',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'UNSAFE_swapExactTokensForTokens';
      } = {} as any
) {
  return useContractWrite<
    typeof routerABI,
    'UNSAFE_swapExactTokensForTokens',
    TMode
  >({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'UNSAFE_swapExactTokensForTokens',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"addLiquidity"`.
 *
 *
 */
export function useRouterAddLiquidity<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof routerAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof routerABI,
          'addLiquidity'
        >['request']['abi'],
        'addLiquidity',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'addLiquidity';
      }
    : UseContractWriteConfig<typeof routerABI, 'addLiquidity', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'addLiquidity';
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'addLiquidity', TMode>({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'addLiquidity',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"addLiquidityETH"`.
 *
 *
 */
export function useRouterAddLiquidityEth<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof routerAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof routerABI,
          'addLiquidityETH'
        >['request']['abi'],
        'addLiquidityETH',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'addLiquidityETH';
      }
    : UseContractWriteConfig<typeof routerABI, 'addLiquidityETH', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'addLiquidityETH';
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'addLiquidityETH', TMode>({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'addLiquidityETH',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeLiquidity"`.
 *
 *
 */
export function useRouterRemoveLiquidity<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof routerAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof routerABI,
          'removeLiquidity'
        >['request']['abi'],
        'removeLiquidity',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'removeLiquidity';
      }
    : UseContractWriteConfig<typeof routerABI, 'removeLiquidity', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'removeLiquidity';
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'removeLiquidity', TMode>({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'removeLiquidity',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeLiquidityETH"`.
 *
 *
 */
export function useRouterRemoveLiquidityEth<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof routerAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof routerABI,
          'removeLiquidityETH'
        >['request']['abi'],
        'removeLiquidityETH',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'removeLiquidityETH';
      }
    : UseContractWriteConfig<typeof routerABI, 'removeLiquidityETH', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'removeLiquidityETH';
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'removeLiquidityETH', TMode>({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'removeLiquidityETH',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeLiquidityETHSupportingFeeOnTransferTokens"`.
 *
 *
 */
export function useRouterRemoveLiquidityEthSupportingFeeOnTransferTokens<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof routerAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof routerABI,
          'removeLiquidityETHSupportingFeeOnTransferTokens'
        >['request']['abi'],
        'removeLiquidityETHSupportingFeeOnTransferTokens',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'removeLiquidityETHSupportingFeeOnTransferTokens';
      }
    : UseContractWriteConfig<
        typeof routerABI,
        'removeLiquidityETHSupportingFeeOnTransferTokens',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'removeLiquidityETHSupportingFeeOnTransferTokens';
      } = {} as any
) {
  return useContractWrite<
    typeof routerABI,
    'removeLiquidityETHSupportingFeeOnTransferTokens',
    TMode
  >({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'removeLiquidityETHSupportingFeeOnTransferTokens',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeLiquidityETHWithPermit"`.
 *
 *
 */
export function useRouterRemoveLiquidityEthWithPermit<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof routerAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof routerABI,
          'removeLiquidityETHWithPermit'
        >['request']['abi'],
        'removeLiquidityETHWithPermit',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'removeLiquidityETHWithPermit';
      }
    : UseContractWriteConfig<
        typeof routerABI,
        'removeLiquidityETHWithPermit',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'removeLiquidityETHWithPermit';
      } = {} as any
) {
  return useContractWrite<
    typeof routerABI,
    'removeLiquidityETHWithPermit',
    TMode
  >({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'removeLiquidityETHWithPermit',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens"`.
 *
 *
 */
export function useRouterRemoveLiquidityEthWithPermitSupportingFeeOnTransferTokens<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof routerAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof routerABI,
          'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens'
        >['request']['abi'],
        'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens';
      }
    : UseContractWriteConfig<
        typeof routerABI,
        'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens';
      } = {} as any
) {
  return useContractWrite<
    typeof routerABI,
    'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens',
    TMode
  >({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeLiquidityWithPermit"`.
 *
 *
 */
export function useRouterRemoveLiquidityWithPermit<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof routerAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof routerABI,
          'removeLiquidityWithPermit'
        >['request']['abi'],
        'removeLiquidityWithPermit',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'removeLiquidityWithPermit';
      }
    : UseContractWriteConfig<
        typeof routerABI,
        'removeLiquidityWithPermit',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'removeLiquidityWithPermit';
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'removeLiquidityWithPermit', TMode>(
    {
      abi: routerABI,
      address: routerAddress[2222],
      functionName: 'removeLiquidityWithPermit',
      ...config,
    } as any
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"swapExactETHForTokens"`.
 *
 *
 */
export function useRouterSwapExactEthForTokens<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof routerAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof routerABI,
          'swapExactETHForTokens'
        >['request']['abi'],
        'swapExactETHForTokens',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'swapExactETHForTokens';
      }
    : UseContractWriteConfig<
        typeof routerABI,
        'swapExactETHForTokens',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'swapExactETHForTokens';
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'swapExactETHForTokens', TMode>({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'swapExactETHForTokens',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"swapExactETHForTokensSupportingFeeOnTransferTokens"`.
 *
 *
 */
export function useRouterSwapExactEthForTokensSupportingFeeOnTransferTokens<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof routerAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof routerABI,
          'swapExactETHForTokensSupportingFeeOnTransferTokens'
        >['request']['abi'],
        'swapExactETHForTokensSupportingFeeOnTransferTokens',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'swapExactETHForTokensSupportingFeeOnTransferTokens';
      }
    : UseContractWriteConfig<
        typeof routerABI,
        'swapExactETHForTokensSupportingFeeOnTransferTokens',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'swapExactETHForTokensSupportingFeeOnTransferTokens';
      } = {} as any
) {
  return useContractWrite<
    typeof routerABI,
    'swapExactETHForTokensSupportingFeeOnTransferTokens',
    TMode
  >({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'swapExactETHForTokensSupportingFeeOnTransferTokens',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"swapExactTokensForETH"`.
 *
 *
 */
export function useRouterSwapExactTokensForEth<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof routerAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof routerABI,
          'swapExactTokensForETH'
        >['request']['abi'],
        'swapExactTokensForETH',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'swapExactTokensForETH';
      }
    : UseContractWriteConfig<
        typeof routerABI,
        'swapExactTokensForETH',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'swapExactTokensForETH';
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'swapExactTokensForETH', TMode>({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'swapExactTokensForETH',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"swapExactTokensForETHSupportingFeeOnTransferTokens"`.
 *
 *
 */
export function useRouterSwapExactTokensForEthSupportingFeeOnTransferTokens<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof routerAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof routerABI,
          'swapExactTokensForETHSupportingFeeOnTransferTokens'
        >['request']['abi'],
        'swapExactTokensForETHSupportingFeeOnTransferTokens',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'swapExactTokensForETHSupportingFeeOnTransferTokens';
      }
    : UseContractWriteConfig<
        typeof routerABI,
        'swapExactTokensForETHSupportingFeeOnTransferTokens',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'swapExactTokensForETHSupportingFeeOnTransferTokens';
      } = {} as any
) {
  return useContractWrite<
    typeof routerABI,
    'swapExactTokensForETHSupportingFeeOnTransferTokens',
    TMode
  >({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'swapExactTokensForETHSupportingFeeOnTransferTokens',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"swapExactTokensForTokens"`.
 *
 *
 */
export function useRouterSwapExactTokensForTokens<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof routerAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof routerABI,
          'swapExactTokensForTokens'
        >['request']['abi'],
        'swapExactTokensForTokens',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'swapExactTokensForTokens';
      }
    : UseContractWriteConfig<
        typeof routerABI,
        'swapExactTokensForTokens',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'swapExactTokensForTokens';
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'swapExactTokensForTokens', TMode>({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'swapExactTokensForTokens',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"swapExactTokensForTokensSimple"`.
 *
 *
 */
export function useRouterSwapExactTokensForTokensSimple<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof routerAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof routerABI,
          'swapExactTokensForTokensSimple'
        >['request']['abi'],
        'swapExactTokensForTokensSimple',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'swapExactTokensForTokensSimple';
      }
    : UseContractWriteConfig<
        typeof routerABI,
        'swapExactTokensForTokensSimple',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'swapExactTokensForTokensSimple';
      } = {} as any
) {
  return useContractWrite<
    typeof routerABI,
    'swapExactTokensForTokensSimple',
    TMode
  >({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'swapExactTokensForTokensSimple',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"swapExactTokensForTokensSupportingFeeOnTransferTokens"`.
 *
 *
 */
export function useRouterSwapExactTokensForTokensSupportingFeeOnTransferTokens<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof routerAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof routerABI,
          'swapExactTokensForTokensSupportingFeeOnTransferTokens'
        >['request']['abi'],
        'swapExactTokensForTokensSupportingFeeOnTransferTokens',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'swapExactTokensForTokensSupportingFeeOnTransferTokens';
      }
    : UseContractWriteConfig<
        typeof routerABI,
        'swapExactTokensForTokensSupportingFeeOnTransferTokens',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'swapExactTokensForTokensSupportingFeeOnTransferTokens';
      } = {} as any
) {
  return useContractWrite<
    typeof routerABI,
    'swapExactTokensForTokensSupportingFeeOnTransferTokens',
    TMode
  >({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__.
 *
 *
 */
export function usePrepareRouterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    address: routerAddress[2222],
    ...config,
  } as UsePrepareContractWriteConfig<typeof routerABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"UNSAFE_swapExactTokensForTokens"`.
 *
 *
 */
export function usePrepareRouterUnsafeSwapExactTokensForTokens(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof routerABI,
      'UNSAFE_swapExactTokensForTokens'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'UNSAFE_swapExactTokensForTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof routerABI, 'UNSAFE_swapExactTokensForTokens'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"addLiquidity"`.
 *
 *
 */
export function usePrepareRouterAddLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'addLiquidity'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'addLiquidity',
    ...config,
  } as UsePrepareContractWriteConfig<typeof routerABI, 'addLiquidity'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"addLiquidityETH"`.
 *
 *
 */
export function usePrepareRouterAddLiquidityEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'addLiquidityETH'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'addLiquidityETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof routerABI, 'addLiquidityETH'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeLiquidity"`.
 *
 *
 */
export function usePrepareRouterRemoveLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'removeLiquidity'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'removeLiquidity',
    ...config,
  } as UsePrepareContractWriteConfig<typeof routerABI, 'removeLiquidity'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeLiquidityETH"`.
 *
 *
 */
export function usePrepareRouterRemoveLiquidityEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'removeLiquidityETH'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'removeLiquidityETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof routerABI, 'removeLiquidityETH'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeLiquidityETHSupportingFeeOnTransferTokens"`.
 *
 *
 */
export function usePrepareRouterRemoveLiquidityEthSupportingFeeOnTransferTokens(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof routerABI,
      'removeLiquidityETHSupportingFeeOnTransferTokens'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'removeLiquidityETHSupportingFeeOnTransferTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof routerABI, 'removeLiquidityETHSupportingFeeOnTransferTokens'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeLiquidityETHWithPermit"`.
 *
 *
 */
export function usePrepareRouterRemoveLiquidityEthWithPermit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof routerABI,
      'removeLiquidityETHWithPermit'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'removeLiquidityETHWithPermit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof routerABI, 'removeLiquidityETHWithPermit'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens"`.
 *
 *
 */
export function usePrepareRouterRemoveLiquidityEthWithPermitSupportingFeeOnTransferTokens(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof routerABI,
      'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof routerABI, 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeLiquidityWithPermit"`.
 *
 *
 */
export function usePrepareRouterRemoveLiquidityWithPermit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof routerABI,
      'removeLiquidityWithPermit'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'removeLiquidityWithPermit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof routerABI, 'removeLiquidityWithPermit'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"swapExactETHForTokens"`.
 *
 *
 */
export function usePrepareRouterSwapExactEthForTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'swapExactETHForTokens'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'swapExactETHForTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof routerABI, 'swapExactETHForTokens'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"swapExactETHForTokensSupportingFeeOnTransferTokens"`.
 *
 *
 */
export function usePrepareRouterSwapExactEthForTokensSupportingFeeOnTransferTokens(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof routerABI,
      'swapExactETHForTokensSupportingFeeOnTransferTokens'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'swapExactETHForTokensSupportingFeeOnTransferTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof routerABI, 'swapExactETHForTokensSupportingFeeOnTransferTokens'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"swapExactTokensForETH"`.
 *
 *
 */
export function usePrepareRouterSwapExactTokensForEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'swapExactTokensForETH'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'swapExactTokensForETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof routerABI, 'swapExactTokensForETH'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"swapExactTokensForETHSupportingFeeOnTransferTokens"`.
 *
 *
 */
export function usePrepareRouterSwapExactTokensForEthSupportingFeeOnTransferTokens(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof routerABI,
      'swapExactTokensForETHSupportingFeeOnTransferTokens'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'swapExactTokensForETHSupportingFeeOnTransferTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof routerABI, 'swapExactTokensForETHSupportingFeeOnTransferTokens'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"swapExactTokensForTokens"`.
 *
 *
 */
export function usePrepareRouterSwapExactTokensForTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'swapExactTokensForTokens'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'swapExactTokensForTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof routerABI, 'swapExactTokensForTokens'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"swapExactTokensForTokensSimple"`.
 *
 *
 */
export function usePrepareRouterSwapExactTokensForTokensSimple(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof routerABI,
      'swapExactTokensForTokensSimple'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'swapExactTokensForTokensSimple',
    ...config,
  } as UsePrepareContractWriteConfig<typeof routerABI, 'swapExactTokensForTokensSimple'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"swapExactTokensForTokensSupportingFeeOnTransferTokens"`.
 *
 *
 */
export function usePrepareRouterSwapExactTokensForTokensSupportingFeeOnTransferTokens(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof routerABI,
      'swapExactTokensForTokensSupportingFeeOnTransferTokens'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof routerAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    address: routerAddress[2222],
    functionName: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof routerABI, 'swapExactTokensForTokensSupportingFeeOnTransferTokens'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsDistributorABI}__.
 *
 *
 */
export function useRewardsDistributorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof rewardsDistributorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardsDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractRead({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    ...config,
  } as UseContractReadConfig<typeof rewardsDistributorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"claimable"`.
 *
 *
 */
export function useRewardsDistributorClaimable<
  TFunctionName extends 'claimable',
  TSelectData = ReadContractResult<typeof rewardsDistributorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardsDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractRead({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'claimable',
    ...config,
  } as UseContractReadConfig<typeof rewardsDistributorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"depositor"`.
 *
 *
 */
export function useRewardsDistributorDepositor<
  TFunctionName extends 'depositor',
  TSelectData = ReadContractResult<typeof rewardsDistributorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardsDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractRead({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'depositor',
    ...config,
  } as UseContractReadConfig<typeof rewardsDistributorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"last_token_time"`.
 *
 *
 */
export function useRewardsDistributorLastTokenTime<
  TFunctionName extends 'last_token_time',
  TSelectData = ReadContractResult<typeof rewardsDistributorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardsDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractRead({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'last_token_time',
    ...config,
  } as UseContractReadConfig<typeof rewardsDistributorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"start_time"`.
 *
 *
 */
export function useRewardsDistributorStartTime<
  TFunctionName extends 'start_time',
  TSelectData = ReadContractResult<typeof rewardsDistributorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardsDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractRead({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'start_time',
    ...config,
  } as UseContractReadConfig<typeof rewardsDistributorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"time_cursor"`.
 *
 *
 */
export function useRewardsDistributorTimeCursor<
  TFunctionName extends 'time_cursor',
  TSelectData = ReadContractResult<typeof rewardsDistributorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardsDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractRead({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'time_cursor',
    ...config,
  } as UseContractReadConfig<typeof rewardsDistributorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"time_cursor_of"`.
 *
 *
 */
export function useRewardsDistributorTimeCursorOf<
  TFunctionName extends 'time_cursor_of',
  TSelectData = ReadContractResult<typeof rewardsDistributorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardsDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractRead({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'time_cursor_of',
    ...config,
  } as UseContractReadConfig<typeof rewardsDistributorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"timestamp"`.
 *
 *
 */
export function useRewardsDistributorTimestamp<
  TFunctionName extends 'timestamp',
  TSelectData = ReadContractResult<typeof rewardsDistributorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardsDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractRead({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'timestamp',
    ...config,
  } as UseContractReadConfig<typeof rewardsDistributorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"token"`.
 *
 *
 */
export function useRewardsDistributorToken<
  TFunctionName extends 'token',
  TSelectData = ReadContractResult<typeof rewardsDistributorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardsDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractRead({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<typeof rewardsDistributorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"token_last_balance"`.
 *
 *
 */
export function useRewardsDistributorTokenLastBalance<
  TFunctionName extends 'token_last_balance',
  TSelectData = ReadContractResult<typeof rewardsDistributorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardsDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractRead({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'token_last_balance',
    ...config,
  } as UseContractReadConfig<typeof rewardsDistributorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"tokens_per_week"`.
 *
 *
 */
export function useRewardsDistributorTokensPerWeek<
  TFunctionName extends 'tokens_per_week',
  TSelectData = ReadContractResult<typeof rewardsDistributorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardsDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractRead({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'tokens_per_week',
    ...config,
  } as UseContractReadConfig<typeof rewardsDistributorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"user_epoch_of"`.
 *
 *
 */
export function useRewardsDistributorUserEpochOf<
  TFunctionName extends 'user_epoch_of',
  TSelectData = ReadContractResult<typeof rewardsDistributorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardsDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractRead({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'user_epoch_of',
    ...config,
  } as UseContractReadConfig<typeof rewardsDistributorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"ve_for_at"`.
 *
 *
 */
export function useRewardsDistributorVeForAt<
  TFunctionName extends 've_for_at',
  TSelectData = ReadContractResult<typeof rewardsDistributorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardsDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractRead({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 've_for_at',
    ...config,
  } as UseContractReadConfig<typeof rewardsDistributorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"ve_supply"`.
 *
 *
 */
export function useRewardsDistributorVeSupply<
  TFunctionName extends 've_supply',
  TSelectData = ReadContractResult<typeof rewardsDistributorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardsDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractRead({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 've_supply',
    ...config,
  } as UseContractReadConfig<typeof rewardsDistributorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"voting_escrow"`.
 *
 *
 */
export function useRewardsDistributorVotingEscrow<
  TFunctionName extends 'voting_escrow',
  TSelectData = ReadContractResult<typeof rewardsDistributorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardsDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractRead({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'voting_escrow',
    ...config,
  } as UseContractReadConfig<typeof rewardsDistributorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsDistributorABI}__.
 *
 *
 */
export function useRewardsDistributorWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof rewardsDistributorAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardsDistributorABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof rewardsDistributorABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any
) {
  return useContractWrite<typeof rewardsDistributorABI, TFunctionName, TMode>({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"checkpoint_token"`.
 *
 *
 */
export function useRewardsDistributorCheckpointToken<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof rewardsDistributorAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardsDistributorABI,
          'checkpoint_token'
        >['request']['abi'],
        'checkpoint_token',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'checkpoint_token';
      }
    : UseContractWriteConfig<
        typeof rewardsDistributorABI,
        'checkpoint_token',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'checkpoint_token';
      } = {} as any
) {
  return useContractWrite<
    typeof rewardsDistributorABI,
    'checkpoint_token',
    TMode
  >({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'checkpoint_token',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"checkpoint_total_supply"`.
 *
 *
 */
export function useRewardsDistributorCheckpointTotalSupply<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof rewardsDistributorAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardsDistributorABI,
          'checkpoint_total_supply'
        >['request']['abi'],
        'checkpoint_total_supply',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'checkpoint_total_supply';
      }
    : UseContractWriteConfig<
        typeof rewardsDistributorABI,
        'checkpoint_total_supply',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'checkpoint_total_supply';
      } = {} as any
) {
  return useContractWrite<
    typeof rewardsDistributorABI,
    'checkpoint_total_supply',
    TMode
  >({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'checkpoint_total_supply',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"claim"`.
 *
 *
 */
export function useRewardsDistributorClaim<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof rewardsDistributorAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardsDistributorABI,
          'claim'
        >['request']['abi'],
        'claim',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'claim' }
    : UseContractWriteConfig<typeof rewardsDistributorABI, 'claim', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'claim';
      } = {} as any
) {
  return useContractWrite<typeof rewardsDistributorABI, 'claim', TMode>({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'claim',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"claim_many"`.
 *
 *
 */
export function useRewardsDistributorClaimMany<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof rewardsDistributorAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardsDistributorABI,
          'claim_many'
        >['request']['abi'],
        'claim_many',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'claim_many' }
    : UseContractWriteConfig<
        typeof rewardsDistributorABI,
        'claim_many',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'claim_many';
      } = {} as any
) {
  return useContractWrite<typeof rewardsDistributorABI, 'claim_many', TMode>({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'claim_many',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"setDepositor"`.
 *
 *
 */
export function useRewardsDistributorSetDepositor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof rewardsDistributorAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardsDistributorABI,
          'setDepositor'
        >['request']['abi'],
        'setDepositor',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'setDepositor';
      }
    : UseContractWriteConfig<
        typeof rewardsDistributorABI,
        'setDepositor',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setDepositor';
      } = {} as any
) {
  return useContractWrite<typeof rewardsDistributorABI, 'setDepositor', TMode>({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'setDepositor',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsDistributorABI}__.
 *
 *
 */
export function usePrepareRewardsDistributorWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardsDistributorABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardsDistributorABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"checkpoint_token"`.
 *
 *
 */
export function usePrepareRewardsDistributorCheckpointToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof rewardsDistributorABI,
      'checkpoint_token'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'checkpoint_token',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardsDistributorABI, 'checkpoint_token'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"checkpoint_total_supply"`.
 *
 *
 */
export function usePrepareRewardsDistributorCheckpointTotalSupply(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof rewardsDistributorABI,
      'checkpoint_total_supply'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'checkpoint_total_supply',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardsDistributorABI, 'checkpoint_total_supply'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"claim"`.
 *
 *
 */
export function usePrepareRewardsDistributorClaim(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardsDistributorABI, 'claim'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'claim',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardsDistributorABI, 'claim'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"claim_many"`.
 *
 *
 */
export function usePrepareRewardsDistributorClaimMany(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardsDistributorABI, 'claim_many'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'claim_many',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardsDistributorABI, 'claim_many'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsDistributorABI}__ and `functionName` set to `"setDepositor"`.
 *
 *
 */
export function usePrepareRewardsDistributorSetDepositor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardsDistributorABI, 'setDepositor'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    functionName: 'setDepositor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardsDistributorABI, 'setDepositor'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsDistributorABI}__.
 *
 *
 */
export function useRewardsDistributorEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof rewardsDistributorABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractEvent({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    ...config,
  } as UseContractEventConfig<typeof rewardsDistributorABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsDistributorABI}__ and `eventName` set to `"CheckpointToken"`.
 *
 *
 */
export function useRewardsDistributorCheckpointTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsDistributorABI, 'CheckpointToken'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractEvent({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    eventName: 'CheckpointToken',
    ...config,
  } as UseContractEventConfig<typeof rewardsDistributorABI, 'CheckpointToken'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsDistributorABI}__ and `eventName` set to `"Claimed"`.
 *
 *
 */
export function useRewardsDistributorClaimedEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsDistributorABI, 'Claimed'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof rewardsDistributorAddress } = {} as any
) {
  return useContractEvent({
    abi: rewardsDistributorABI,
    address: rewardsDistributorAddress[2222],
    eventName: 'Claimed',
    ...config,
  } as UseContractEventConfig<typeof rewardsDistributorABI, 'Claimed'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link libraryABI}__.
 *
 *
 */
export function useLibraryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof libraryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof libraryABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof libraryAddress } = {} as any
) {
  return useContractRead({
    abi: libraryABI,
    address: libraryAddress[2222],
    ...config,
  } as UseContractReadConfig<typeof libraryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link libraryABI}__ and `functionName` set to `"getAmountOut"`.
 *
 *
 */
export function useLibraryGetAmountOut<
  TFunctionName extends 'getAmountOut',
  TSelectData = ReadContractResult<typeof libraryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof libraryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof libraryAddress } = {} as any
) {
  return useContractRead({
    abi: libraryABI,
    address: libraryAddress[2222],
    functionName: 'getAmountOut',
    ...config,
  } as UseContractReadConfig<typeof libraryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link libraryABI}__ and `functionName` set to `"getMinimumValue"`.
 *
 *
 */
export function useLibraryGetMinimumValue<
  TFunctionName extends 'getMinimumValue',
  TSelectData = ReadContractResult<typeof libraryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof libraryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof libraryAddress } = {} as any
) {
  return useContractRead({
    abi: libraryABI,
    address: libraryAddress[2222],
    functionName: 'getMinimumValue',
    ...config,
  } as UseContractReadConfig<typeof libraryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link libraryABI}__ and `functionName` set to `"getSample"`.
 *
 *
 */
export function useLibraryGetSample<
  TFunctionName extends 'getSample',
  TSelectData = ReadContractResult<typeof libraryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof libraryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof libraryAddress } = {} as any
) {
  return useContractRead({
    abi: libraryABI,
    address: libraryAddress[2222],
    functionName: 'getSample',
    ...config,
  } as UseContractReadConfig<typeof libraryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link libraryABI}__ and `functionName` set to `"getTradeDiff"`.
 *
 *
 */
export function useLibraryGetTradeDiff<
  TFunctionName extends 'getTradeDiff',
  TSelectData = ReadContractResult<typeof libraryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof libraryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof libraryAddress } = {} as any
) {
  return useContractRead({
    abi: libraryABI,
    address: libraryAddress[2222],
    functionName: 'getTradeDiff',
    ...config,
  } as UseContractReadConfig<typeof libraryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedExternalBribeFactoryABI}__.
 *
 *
 */
export function useWrappedExternalBribeFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof wrappedExternalBribeFactoryABI,
    TFunctionName
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedExternalBribeFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof wrappedExternalBribeFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: wrappedExternalBribeFactoryABI,
    address: wrappedExternalBribeFactoryAddress[2222],
    ...config,
  } as UseContractReadConfig<typeof wrappedExternalBribeFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedExternalBribeFactoryABI}__ and `functionName` set to `"last_bribe"`.
 *
 *
 */
export function useWrappedExternalBribeFactoryLastBribe<
  TFunctionName extends 'last_bribe',
  TSelectData = ReadContractResult<
    typeof wrappedExternalBribeFactoryABI,
    TFunctionName
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedExternalBribeFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedExternalBribeFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: wrappedExternalBribeFactoryABI,
    address: wrappedExternalBribeFactoryAddress[2222],
    functionName: 'last_bribe',
    ...config,
  } as UseContractReadConfig<typeof wrappedExternalBribeFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedExternalBribeFactoryABI}__ and `functionName` set to `"oldBribeToNew"`.
 *
 *
 */
export function useWrappedExternalBribeFactoryOldBribeToNew<
  TFunctionName extends 'oldBribeToNew',
  TSelectData = ReadContractResult<
    typeof wrappedExternalBribeFactoryABI,
    TFunctionName
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedExternalBribeFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedExternalBribeFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: wrappedExternalBribeFactoryABI,
    address: wrappedExternalBribeFactoryAddress[2222],
    functionName: 'oldBribeToNew',
    ...config,
  } as UseContractReadConfig<typeof wrappedExternalBribeFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedExternalBribeFactoryABI}__ and `functionName` set to `"voter"`.
 *
 *
 */
export function useWrappedExternalBribeFactoryVoter<
  TFunctionName extends 'voter',
  TSelectData = ReadContractResult<
    typeof wrappedExternalBribeFactoryABI,
    TFunctionName
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedExternalBribeFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedExternalBribeFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: wrappedExternalBribeFactoryABI,
    address: wrappedExternalBribeFactoryAddress[2222],
    functionName: 'voter',
    ...config,
  } as UseContractReadConfig<typeof wrappedExternalBribeFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedExternalBribeFactoryABI}__.
 *
 *
 */
export function useWrappedExternalBribeFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedExternalBribeFactoryAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedExternalBribeFactoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof wrappedExternalBribeFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any
) {
  return useContractWrite<
    typeof wrappedExternalBribeFactoryABI,
    TFunctionName,
    TMode
  >({
    abi: wrappedExternalBribeFactoryABI,
    address: wrappedExternalBribeFactoryAddress[2222],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedExternalBribeFactoryABI}__ and `functionName` set to `"createBribe"`.
 *
 *
 */
export function useWrappedExternalBribeFactoryCreateBribe<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedExternalBribeFactoryAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedExternalBribeFactoryABI,
          'createBribe'
        >['request']['abi'],
        'createBribe',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'createBribe';
      }
    : UseContractWriteConfig<
        typeof wrappedExternalBribeFactoryABI,
        'createBribe',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'createBribe';
      } = {} as any
) {
  return useContractWrite<
    typeof wrappedExternalBribeFactoryABI,
    'createBribe',
    TMode
  >({
    abi: wrappedExternalBribeFactoryABI,
    address: wrappedExternalBribeFactoryAddress[2222],
    functionName: 'createBribe',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedExternalBribeFactoryABI}__.
 *
 *
 */
export function usePrepareWrappedExternalBribeFactoryWrite<
  TFunctionName extends string
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedExternalBribeFactoryABI,
      TFunctionName
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof wrappedExternalBribeFactoryAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: wrappedExternalBribeFactoryABI,
    address: wrappedExternalBribeFactoryAddress[2222],
    ...config,
  } as UsePrepareContractWriteConfig<typeof wrappedExternalBribeFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedExternalBribeFactoryABI}__ and `functionName` set to `"createBribe"`.
 *
 *
 */
export function usePrepareWrappedExternalBribeFactoryCreateBribe(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedExternalBribeFactoryABI,
      'createBribe'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedExternalBribeFactoryAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: wrappedExternalBribeFactoryABI,
    address: wrappedExternalBribeFactoryAddress[2222],
    functionName: 'createBribe',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wrappedExternalBribeFactoryABI, 'createBribe'>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veSplitterABI}__.
 *
 *
 */
export function useVeSplitterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veSplitterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veSplitterABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof veSplitterABI, TFunctionName, TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any
) {
  return useContractWrite<typeof veSplitterABI, TFunctionName, TMode>({
    abi: veSplitterABI,
    address: veSplitterAddress[2222],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veSplitterABI}__ and `functionName` set to `"split"`.
 *
 *
 */
export function useVeSplitterSplit<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof veSplitterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof veSplitterABI,
          'split'
        >['request']['abi'],
        'split',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'split' }
    : UseContractWriteConfig<typeof veSplitterABI, 'split', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'split';
      } = {} as any
) {
  return useContractWrite<typeof veSplitterABI, 'split', TMode>({
    abi: veSplitterABI,
    address: veSplitterAddress[2222],
    functionName: 'split',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veSplitterABI}__.
 *
 *
 */
export function usePrepareVeSplitterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veSplitterABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof veSplitterAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veSplitterABI,
    address: veSplitterAddress[2222],
    ...config,
  } as UsePrepareContractWriteConfig<typeof veSplitterABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veSplitterABI}__ and `functionName` set to `"split"`.
 *
 *
 */
export function usePrepareVeSplitterSplit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veSplitterABI, 'split'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof veSplitterAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: veSplitterABI,
    address: veSplitterAddress[2222],
    functionName: 'split',
    ...config,
  } as UsePrepareContractWriteConfig<typeof veSplitterABI, 'split'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedKavaABI}__.
 *
 *
 */
export function useWrappedKavaRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof wrappedKavaABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractRead({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    ...config,
  } as UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"ERR_INVALID_ZERO_VALUE"`.
 *
 *
 */
export function useWrappedKavaErrInvalidZeroValue<
  TFunctionName extends 'ERR_INVALID_ZERO_VALUE',
  TSelectData = ReadContractResult<typeof wrappedKavaABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractRead({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'ERR_INVALID_ZERO_VALUE',
    ...config,
  } as UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"ERR_NO_ERROR"`.
 *
 *
 */
export function useWrappedKavaErrNoError<
  TFunctionName extends 'ERR_NO_ERROR',
  TSelectData = ReadContractResult<typeof wrappedKavaABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractRead({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'ERR_NO_ERROR',
    ...config,
  } as UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"allowance"`.
 *
 *
 */
export function useWrappedKavaAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof wrappedKavaABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractRead({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"balanceOf"`.
 *
 *
 */
export function useWrappedKavaBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof wrappedKavaABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractRead({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"decimals"`.
 *
 *
 */
export function useWrappedKavaDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof wrappedKavaABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractRead({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"isPauser"`.
 *
 *
 */
export function useWrappedKavaIsPauser<
  TFunctionName extends 'isPauser',
  TSelectData = ReadContractResult<typeof wrappedKavaABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractRead({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'isPauser',
    ...config,
  } as UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"name"`.
 *
 *
 */
export function useWrappedKavaName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof wrappedKavaABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractRead({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"paused"`.
 *
 *
 */
export function useWrappedKavaPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof wrappedKavaABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractRead({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"symbol"`.
 *
 *
 */
export function useWrappedKavaSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof wrappedKavaABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractRead({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"totalSupply"`.
 *
 *
 */
export function useWrappedKavaTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof wrappedKavaABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractRead({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof wrappedKavaABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__.
 *
 *
 */
export function useWrappedKavaWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedKavaAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedKavaABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof wrappedKavaABI, TFunctionName, TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any
) {
  return useContractWrite<typeof wrappedKavaABI, TFunctionName, TMode>({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"addPauser"`.
 *
 *
 */
export function useWrappedKavaAddPauser<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedKavaAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedKavaABI,
          'addPauser'
        >['request']['abi'],
        'addPauser',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'addPauser' }
    : UseContractWriteConfig<typeof wrappedKavaABI, 'addPauser', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'addPauser';
      } = {} as any
) {
  return useContractWrite<typeof wrappedKavaABI, 'addPauser', TMode>({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'addPauser',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"approve"`.
 *
 *
 */
export function useWrappedKavaApprove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedKavaAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedKavaABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<typeof wrappedKavaABI, 'approve', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<typeof wrappedKavaABI, 'approve', TMode>({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"decreaseAllowance"`.
 *
 *
 */
export function useWrappedKavaDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedKavaAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedKavaABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'decreaseAllowance';
      }
    : UseContractWriteConfig<
        typeof wrappedKavaABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'decreaseAllowance';
      } = {} as any
) {
  return useContractWrite<typeof wrappedKavaABI, 'decreaseAllowance', TMode>({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'decreaseAllowance',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"deposit"`.
 *
 *
 */
export function useWrappedKavaDeposit<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedKavaAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedKavaABI,
          'deposit'
        >['request']['abi'],
        'deposit',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'deposit' }
    : UseContractWriteConfig<typeof wrappedKavaABI, 'deposit', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'deposit';
      } = {} as any
) {
  return useContractWrite<typeof wrappedKavaABI, 'deposit', TMode>({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'deposit',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"increaseAllowance"`.
 *
 *
 */
export function useWrappedKavaIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedKavaAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedKavaABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'increaseAllowance';
      }
    : UseContractWriteConfig<
        typeof wrappedKavaABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'increaseAllowance';
      } = {} as any
) {
  return useContractWrite<typeof wrappedKavaABI, 'increaseAllowance', TMode>({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'increaseAllowance',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"pause"`.
 *
 *
 */
export function useWrappedKavaPause<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedKavaAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedKavaABI,
          'pause'
        >['request']['abi'],
        'pause',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'pause' }
    : UseContractWriteConfig<typeof wrappedKavaABI, 'pause', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'pause';
      } = {} as any
) {
  return useContractWrite<typeof wrappedKavaABI, 'pause', TMode>({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'pause',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"renouncePauser"`.
 *
 *
 */
export function useWrappedKavaRenouncePauser<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedKavaAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedKavaABI,
          'renouncePauser'
        >['request']['abi'],
        'renouncePauser',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'renouncePauser';
      }
    : UseContractWriteConfig<typeof wrappedKavaABI, 'renouncePauser', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'renouncePauser';
      } = {} as any
) {
  return useContractWrite<typeof wrappedKavaABI, 'renouncePauser', TMode>({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'renouncePauser',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"transfer"`.
 *
 *
 */
export function useWrappedKavaTransfer<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedKavaAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedKavaABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transfer' }
    : UseContractWriteConfig<typeof wrappedKavaABI, 'transfer', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'transfer';
      } = {} as any
) {
  return useContractWrite<typeof wrappedKavaABI, 'transfer', TMode>({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"transferFrom"`.
 *
 *
 */
export function useWrappedKavaTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedKavaAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedKavaABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'transferFrom';
      }
    : UseContractWriteConfig<typeof wrappedKavaABI, 'transferFrom', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<typeof wrappedKavaABI, 'transferFrom', TMode>({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"unpause"`.
 *
 *
 */
export function useWrappedKavaUnpause<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedKavaAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedKavaABI,
          'unpause'
        >['request']['abi'],
        'unpause',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'unpause' }
    : UseContractWriteConfig<typeof wrappedKavaABI, 'unpause', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'unpause';
      } = {} as any
) {
  return useContractWrite<typeof wrappedKavaABI, 'unpause', TMode>({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'unpause',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"withdraw"`.
 *
 *
 */
export function useWrappedKavaWithdraw<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedKavaAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedKavaABI,
          'withdraw'
        >['request']['abi'],
        'withdraw',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof wrappedKavaABI, 'withdraw', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'withdraw';
      } = {} as any
) {
  return useContractWrite<typeof wrappedKavaABI, 'withdraw', TMode>({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'withdraw',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__.
 *
 *
 */
export function usePrepareWrappedKavaWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wrappedKavaABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    ...config,
  } as UsePrepareContractWriteConfig<typeof wrappedKavaABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"addPauser"`.
 *
 *
 */
export function usePrepareWrappedKavaAddPauser(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'addPauser'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'addPauser',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'addPauser'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"approve"`.
 *
 *
 */
export function usePrepareWrappedKavaApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"decreaseAllowance"`.
 *
 *
 */
export function usePrepareWrappedKavaDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'decreaseAllowance'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'decreaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"deposit"`.
 *
 *
 */
export function usePrepareWrappedKavaDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'deposit'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'deposit'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"increaseAllowance"`.
 *
 *
 */
export function usePrepareWrappedKavaIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'increaseAllowance'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'increaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"pause"`.
 *
 *
 */
export function usePrepareWrappedKavaPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'pause'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'pause'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"renouncePauser"`.
 *
 *
 */
export function usePrepareWrappedKavaRenouncePauser(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'renouncePauser'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'renouncePauser',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'renouncePauser'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"transfer"`.
 *
 *
 */
export function usePrepareWrappedKavaTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'transfer'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"transferFrom"`.
 *
 *
 */
export function usePrepareWrappedKavaTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'transferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"unpause"`.
 *
 *
 */
export function usePrepareWrappedKavaUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'unpause'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'unpause'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedKavaABI}__ and `functionName` set to `"withdraw"`.
 *
 *
 */
export function usePrepareWrappedKavaWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'withdraw'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wrappedKavaABI, 'withdraw'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedKavaABI}__.
 *
 *
 */
export function useWrappedKavaEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof wrappedKavaABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractEvent({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    ...config,
  } as UseContractEventConfig<typeof wrappedKavaABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedKavaABI}__ and `eventName` set to `"Approval"`.
 *
 *
 */
export function useWrappedKavaApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof wrappedKavaABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractEvent({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof wrappedKavaABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedKavaABI}__ and `eventName` set to `"Paused"`.
 *
 *
 */
export function useWrappedKavaPausedEvent(
  config: Omit<
    UseContractEventConfig<typeof wrappedKavaABI, 'Paused'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractEvent({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof wrappedKavaABI, 'Paused'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedKavaABI}__ and `eventName` set to `"PauserAdded"`.
 *
 *
 */
export function useWrappedKavaPauserAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof wrappedKavaABI, 'PauserAdded'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractEvent({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    eventName: 'PauserAdded',
    ...config,
  } as UseContractEventConfig<typeof wrappedKavaABI, 'PauserAdded'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedKavaABI}__ and `eventName` set to `"PauserRemoved"`.
 *
 *
 */
export function useWrappedKavaPauserRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof wrappedKavaABI, 'PauserRemoved'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractEvent({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    eventName: 'PauserRemoved',
    ...config,
  } as UseContractEventConfig<typeof wrappedKavaABI, 'PauserRemoved'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedKavaABI}__ and `eventName` set to `"Transfer"`.
 *
 *
 */
export function useWrappedKavaTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof wrappedKavaABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractEvent({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof wrappedKavaABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedKavaABI}__ and `eventName` set to `"Unpaused"`.
 *
 *
 */
export function useWrappedKavaUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof wrappedKavaABI, 'Unpaused'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof wrappedKavaAddress } = {} as any
) {
  return useContractEvent({
    abi: wrappedKavaABI,
    address: wrappedKavaAddress[2222],
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof wrappedKavaABI, 'Unpaused'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20ABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, TFunctionName, TMode>({
    abi: erc20ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20ABI, 'approve', TMode> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, 'approve', TMode>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"showMeTheMoney"`.
 */
export function useErc20ShowMeTheMoney<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'showMeTheMoney'
        >['request']['abi'],
        'showMeTheMoney',
        TMode
      > & { functionName?: 'showMeTheMoney' }
    : UseContractWriteConfig<typeof erc20ABI, 'showMeTheMoney', TMode> & {
        abi?: never;
        functionName?: 'showMeTheMoney';
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, 'showMeTheMoney', TMode>({
    abi: erc20ABI,
    functionName: 'showMeTheMoney',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20ABI, 'transfer', TMode> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, 'transfer', TMode>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20ABI, 'transferFrom', TMode> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, 'transferFrom', TMode>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"showMeTheMoney"`.
 */
export function usePrepareErc20ShowMeTheMoney(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'showMeTheMoney'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'showMeTheMoney',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'showMeTheMoney'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__.
 */
export function usePairRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: pairABI, ...config } as UseContractReadConfig<
    typeof pairABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function usePairDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"MINIMUM_LIQUIDITY"`.
 */
export function usePairMinimumLiquidity<
  TFunctionName extends 'MINIMUM_LIQUIDITY',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'MINIMUM_LIQUIDITY',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function usePairPermitTypehash<
  TFunctionName extends 'PERMIT_TYPEHASH',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'PERMIT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"allowance"`.
 */
export function usePairAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"balanceOf"`.
 */
export function usePairBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"blockTimestampLast"`.
 */
export function usePairBlockTimestampLast<
  TFunctionName extends 'blockTimestampLast',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'blockTimestampLast',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"claimable0"`.
 */
export function usePairClaimable0<
  TFunctionName extends 'claimable0',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'claimable0',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"claimable1"`.
 */
export function usePairClaimable1<
  TFunctionName extends 'claimable1',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'claimable1',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"computeAmountOut"`.
 */
export function usePairComputeAmountOut<
  TFunctionName extends 'computeAmountOut',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'computeAmountOut',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"current"`.
 */
export function usePairCurrent<
  TFunctionName extends 'current',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'current',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"currentBlockTimestamp"`.
 */
export function usePairCurrentBlockTimestamp<
  TFunctionName extends 'currentBlockTimestamp',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'currentBlockTimestamp',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"currentCumulativePrices"`.
 */
export function usePairCurrentCumulativePrices<
  TFunctionName extends 'currentCumulativePrices',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'currentCumulativePrices',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"decimals"`.
 */
export function usePairDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"fees"`.
 */
export function usePairFees<
  TFunctionName extends 'fees',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'fees',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"getAmountOut"`.
 */
export function usePairGetAmountOut<
  TFunctionName extends 'getAmountOut',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'getAmountOut',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"getReserves"`.
 */
export function usePairGetReserves<
  TFunctionName extends 'getReserves',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'getReserves',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"index0"`.
 */
export function usePairIndex0<
  TFunctionName extends 'index0',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'index0',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"index1"`.
 */
export function usePairIndex1<
  TFunctionName extends 'index1',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'index1',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"lastObservation"`.
 */
export function usePairLastObservation<
  TFunctionName extends 'lastObservation',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'lastObservation',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"name"`.
 */
export function usePairName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"nonces"`.
 */
export function usePairNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"observationLength"`.
 */
export function usePairObservationLength<
  TFunctionName extends 'observationLength',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'observationLength',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"observations"`.
 */
export function usePairObservations<
  TFunctionName extends 'observations',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'observations',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"periodSize"`.
 */
export function usePairPeriodSize<
  TFunctionName extends 'periodSize',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'periodSize',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"price0CumulativeLast"`.
 */
export function usePairPrice0CumulativeLast<
  TFunctionName extends 'price0CumulativeLast',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'price0CumulativeLast',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"price1CumulativeLast"`.
 */
export function usePairPrice1CumulativeLast<
  TFunctionName extends 'price1CumulativeLast',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'price1CumulativeLast',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"prices"`.
 */
export function usePairPrices<
  TFunctionName extends 'prices',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'prices',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"quote"`.
 */
export function usePairQuote<
  TFunctionName extends 'quote',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'quote',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"reserve0"`.
 */
export function usePairReserve0<
  TFunctionName extends 'reserve0',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'reserve0',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"reserve0Last"`.
 */
export function usePairReserve0Last<
  TFunctionName extends 'reserve0Last',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'reserve0Last',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"reserve1"`.
 */
export function usePairReserve1<
  TFunctionName extends 'reserve1',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'reserve1',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"reserve1Last"`.
 */
export function usePairReserve1Last<
  TFunctionName extends 'reserve1Last',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'reserve1Last',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"sample"`.
 */
export function usePairSample<
  TFunctionName extends 'sample',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'sample',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"stable"`.
 */
export function usePairStable<
  TFunctionName extends 'stable',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'stable',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"supplyIndex0"`.
 */
export function usePairSupplyIndex0<
  TFunctionName extends 'supplyIndex0',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'supplyIndex0',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"supplyIndex1"`.
 */
export function usePairSupplyIndex1<
  TFunctionName extends 'supplyIndex1',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'supplyIndex1',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"symbol"`.
 */
export function usePairSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"token0"`.
 */
export function usePairToken0<
  TFunctionName extends 'token0',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'token0',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"token1"`.
 */
export function usePairToken1<
  TFunctionName extends 'token1',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'token1',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"totalSupply"`.
 */
export function usePairTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__.
 */
export function usePairWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pairABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof pairABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof pairABI, TFunctionName, TMode>({
    abi: pairABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"approve"`.
 */
export function usePairApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pairABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof pairABI, 'approve', TMode> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<typeof pairABI, 'approve', TMode>({
    abi: pairABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"burn"`.
 */
export function usePairBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pairABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof pairABI, 'burn', TMode> & {
        abi?: never;
        functionName?: 'burn';
      } = {} as any
) {
  return useContractWrite<typeof pairABI, 'burn', TMode>({
    abi: pairABI,
    functionName: 'burn',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"claimFees"`.
 */
export function usePairClaimFees<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairABI,
          'claimFees'
        >['request']['abi'],
        'claimFees',
        TMode
      > & { functionName?: 'claimFees' }
    : UseContractWriteConfig<typeof pairABI, 'claimFees', TMode> & {
        abi?: never;
        functionName?: 'claimFees';
      } = {} as any
) {
  return useContractWrite<typeof pairABI, 'claimFees', TMode>({
    abi: pairABI,
    functionName: 'claimFees',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"claimFeesFor"`.
 */
export function usePairClaimFeesFor<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairABI,
          'claimFeesFor'
        >['request']['abi'],
        'claimFeesFor',
        TMode
      > & { functionName?: 'claimFeesFor' }
    : UseContractWriteConfig<typeof pairABI, 'claimFeesFor', TMode> & {
        abi?: never;
        functionName?: 'claimFeesFor';
      } = {} as any
) {
  return useContractWrite<typeof pairABI, 'claimFeesFor', TMode>({
    abi: pairABI,
    functionName: 'claimFeesFor',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"mint"`.
 */
export function usePairMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pairABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof pairABI, 'mint', TMode> & {
        abi?: never;
        functionName?: 'mint';
      } = {} as any
) {
  return useContractWrite<typeof pairABI, 'mint', TMode>({
    abi: pairABI,
    functionName: 'mint',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"permit"`.
 */
export function usePairPermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pairABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof pairABI, 'permit', TMode> & {
        abi?: never;
        functionName?: 'permit';
      } = {} as any
) {
  return useContractWrite<typeof pairABI, 'permit', TMode>({
    abi: pairABI,
    functionName: 'permit',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"skim"`.
 */
export function usePairSkim<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pairABI, 'skim'>['request']['abi'],
        'skim',
        TMode
      > & { functionName?: 'skim' }
    : UseContractWriteConfig<typeof pairABI, 'skim', TMode> & {
        abi?: never;
        functionName?: 'skim';
      } = {} as any
) {
  return useContractWrite<typeof pairABI, 'skim', TMode>({
    abi: pairABI,
    functionName: 'skim',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"swap"`.
 */
export function usePairSwap<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pairABI, 'swap'>['request']['abi'],
        'swap',
        TMode
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<typeof pairABI, 'swap', TMode> & {
        abi?: never;
        functionName?: 'swap';
      } = {} as any
) {
  return useContractWrite<typeof pairABI, 'swap', TMode>({
    abi: pairABI,
    functionName: 'swap',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"sync"`.
 */
export function usePairSync<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pairABI, 'sync'>['request']['abi'],
        'sync',
        TMode
      > & { functionName?: 'sync' }
    : UseContractWriteConfig<typeof pairABI, 'sync', TMode> & {
        abi?: never;
        functionName?: 'sync';
      } = {} as any
) {
  return useContractWrite<typeof pairABI, 'sync', TMode>({
    abi: pairABI,
    functionName: 'sync',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"transfer"`.
 */
export function usePairTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof pairABI, 'transfer', TMode> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any
) {
  return useContractWrite<typeof pairABI, 'transfer', TMode>({
    abi: pairABI,
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePairTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof pairABI, 'transferFrom', TMode> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<typeof pairABI, 'transferFrom', TMode>({
    abi: pairABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__.
 */
export function usePreparePairWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: pairABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"approve"`.
 */
export function usePreparePairApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"burn"`.
 */
export function usePreparePairBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'burn'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"claimFees"`.
 */
export function usePreparePairClaimFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'claimFees'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'claimFees',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'claimFees'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"claimFeesFor"`.
 */
export function usePreparePairClaimFeesFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'claimFeesFor'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'claimFeesFor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'claimFeesFor'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"mint"`.
 */
export function usePreparePairMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'mint'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"permit"`.
 */
export function usePreparePairPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'permit'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"skim"`.
 */
export function usePreparePairSkim(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'skim'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'skim',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'skim'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"swap"`.
 */
export function usePreparePairSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'swap'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"sync"`.
 */
export function usePreparePairSync(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'sync'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'sync',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'sync'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"transfer"`.
 */
export function usePreparePairTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePreparePairTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__.
 */
export function usePairEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pairABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({ abi: pairABI, ...config } as UseContractEventConfig<
    typeof pairABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__ and `eventName` set to `"Approval"`.
 */
export function usePairApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof pairABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: pairABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof pairABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__ and `eventName` set to `"Burn"`.
 */
export function usePairBurnEvent(
  config: Omit<
    UseContractEventConfig<typeof pairABI, 'Burn'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: pairABI,
    eventName: 'Burn',
    ...config,
  } as UseContractEventConfig<typeof pairABI, 'Burn'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__ and `eventName` set to `"Fees"`.
 */
export function usePairFeesEvent(
  config: Omit<
    UseContractEventConfig<typeof pairABI, 'Fees'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: pairABI,
    eventName: 'Fees',
    ...config,
  } as UseContractEventConfig<typeof pairABI, 'Fees'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__ and `eventName` set to `"Mint"`.
 */
export function usePairMintEvent(
  config: Omit<
    UseContractEventConfig<typeof pairABI, 'Mint'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: pairABI,
    eventName: 'Mint',
    ...config,
  } as UseContractEventConfig<typeof pairABI, 'Mint'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__ and `eventName` set to `"Swap"`.
 */
export function usePairSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof pairABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: pairABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof pairABI, 'Swap'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__ and `eventName` set to `"Sync"`.
 */
export function usePairSyncEvent(
  config: Omit<
    UseContractEventConfig<typeof pairABI, 'Sync'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: pairABI,
    eventName: 'Sync',
    ...config,
  } as UseContractEventConfig<typeof pairABI, 'Sync'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__ and `eventName` set to `"Transfer"`.
 */
export function usePairTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof pairABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: pairABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof pairABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__.
 */
export function useGaugeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: gaugeABI, ...config } as UseContractReadConfig<
    typeof gaugeABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"_ve"`.
 */
export function useGaugeVe<
  TFunctionName extends '_ve',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: '_ve',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useGaugeBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useGaugeCheckpoints<
  TFunctionName extends 'checkpoints',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'checkpoints',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"derivedBalance"`.
 */
export function useGaugeDerivedBalance<
  TFunctionName extends 'derivedBalance',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'derivedBalance',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"derivedBalances"`.
 */
export function useGaugeDerivedBalances<
  TFunctionName extends 'derivedBalances',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'derivedBalances',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"derivedSupply"`.
 */
export function useGaugeDerivedSupply<
  TFunctionName extends 'derivedSupply',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'derivedSupply',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"earned"`.
 */
export function useGaugeEarned<
  TFunctionName extends 'earned',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'earned',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"external_bribe"`.
 */
export function useGaugeExternalBribe<
  TFunctionName extends 'external_bribe',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'external_bribe',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"fees0"`.
 */
export function useGaugeFees0<
  TFunctionName extends 'fees0',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'fees0',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"fees1"`.
 */
export function useGaugeFees1<
  TFunctionName extends 'fees1',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'fees1',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"getPriorBalanceIndex"`.
 */
export function useGaugeGetPriorBalanceIndex<
  TFunctionName extends 'getPriorBalanceIndex',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'getPriorBalanceIndex',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"getPriorRewardPerToken"`.
 */
export function useGaugeGetPriorRewardPerToken<
  TFunctionName extends 'getPriorRewardPerToken',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'getPriorRewardPerToken',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"getPriorSupplyIndex"`.
 */
export function useGaugeGetPriorSupplyIndex<
  TFunctionName extends 'getPriorSupplyIndex',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'getPriorSupplyIndex',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"internal_bribe"`.
 */
export function useGaugeInternalBribe<
  TFunctionName extends 'internal_bribe',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'internal_bribe',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"isForPair"`.
 */
export function useGaugeIsForPair<
  TFunctionName extends 'isForPair',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'isForPair',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"isReward"`.
 */
export function useGaugeIsReward<
  TFunctionName extends 'isReward',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'isReward',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"lastEarn"`.
 */
export function useGaugeLastEarn<
  TFunctionName extends 'lastEarn',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'lastEarn',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"lastTimeRewardApplicable"`.
 */
export function useGaugeLastTimeRewardApplicable<
  TFunctionName extends 'lastTimeRewardApplicable',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'lastTimeRewardApplicable',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"lastUpdateTime"`.
 */
export function useGaugeLastUpdateTime<
  TFunctionName extends 'lastUpdateTime',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'lastUpdateTime',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"left"`.
 */
export function useGaugeLeft<
  TFunctionName extends 'left',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'left',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"numCheckpoints"`.
 */
export function useGaugeNumCheckpoints<
  TFunctionName extends 'numCheckpoints',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'numCheckpoints',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"periodFinish"`.
 */
export function useGaugePeriodFinish<
  TFunctionName extends 'periodFinish',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'periodFinish',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"rewardPerToken"`.
 */
export function useGaugeRewardPerToken<
  TFunctionName extends 'rewardPerToken',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'rewardPerToken',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"rewardPerTokenCheckpoints"`.
 */
export function useGaugeRewardPerTokenCheckpoints<
  TFunctionName extends 'rewardPerTokenCheckpoints',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'rewardPerTokenCheckpoints',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"rewardPerTokenNumCheckpoints"`.
 */
export function useGaugeRewardPerTokenNumCheckpoints<
  TFunctionName extends 'rewardPerTokenNumCheckpoints',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'rewardPerTokenNumCheckpoints',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"rewardPerTokenStored"`.
 */
export function useGaugeRewardPerTokenStored<
  TFunctionName extends 'rewardPerTokenStored',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'rewardPerTokenStored',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"rewardRate"`.
 */
export function useGaugeRewardRate<
  TFunctionName extends 'rewardRate',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'rewardRate',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"rewards"`.
 */
export function useGaugeRewards<
  TFunctionName extends 'rewards',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'rewards',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"rewardsListLength"`.
 */
export function useGaugeRewardsListLength<
  TFunctionName extends 'rewardsListLength',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'rewardsListLength',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"stake"`.
 */
export function useGaugeStake<
  TFunctionName extends 'stake',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'stake',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"supplyCheckpoints"`.
 */
export function useGaugeSupplyCheckpoints<
  TFunctionName extends 'supplyCheckpoints',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'supplyCheckpoints',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"supplyNumCheckpoints"`.
 */
export function useGaugeSupplyNumCheckpoints<
  TFunctionName extends 'supplyNumCheckpoints',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'supplyNumCheckpoints',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"tokenIds"`.
 */
export function useGaugeTokenIds<
  TFunctionName extends 'tokenIds',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'tokenIds',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useGaugeTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"userRewardPerTokenStored"`.
 */
export function useGaugeUserRewardPerTokenStored<
  TFunctionName extends 'userRewardPerTokenStored',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'userRewardPerTokenStored',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"voter"`.
 */
export function useGaugeVoter<
  TFunctionName extends 'voter',
  TSelectData = ReadContractResult<typeof gaugeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gaugeABI,
    functionName: 'voter',
    ...config,
  } as UseContractReadConfig<typeof gaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gaugeABI}__.
 */
export function useGaugeWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof gaugeABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof gaugeABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof gaugeABI, TFunctionName, TMode>({
    abi: gaugeABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"batchRewardPerToken"`.
 */
export function useGaugeBatchRewardPerToken<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gaugeABI,
          'batchRewardPerToken'
        >['request']['abi'],
        'batchRewardPerToken',
        TMode
      > & { functionName?: 'batchRewardPerToken' }
    : UseContractWriteConfig<typeof gaugeABI, 'batchRewardPerToken', TMode> & {
        abi?: never;
        functionName?: 'batchRewardPerToken';
      } = {} as any
) {
  return useContractWrite<typeof gaugeABI, 'batchRewardPerToken', TMode>({
    abi: gaugeABI,
    functionName: 'batchRewardPerToken',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"batchUpdateRewardPerToken"`.
 */
export function useGaugeBatchUpdateRewardPerToken<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gaugeABI,
          'batchUpdateRewardPerToken'
        >['request']['abi'],
        'batchUpdateRewardPerToken',
        TMode
      > & { functionName?: 'batchUpdateRewardPerToken' }
    : UseContractWriteConfig<
        typeof gaugeABI,
        'batchUpdateRewardPerToken',
        TMode
      > & {
        abi?: never;
        functionName?: 'batchUpdateRewardPerToken';
      } = {} as any
) {
  return useContractWrite<typeof gaugeABI, 'batchUpdateRewardPerToken', TMode>({
    abi: gaugeABI,
    functionName: 'batchUpdateRewardPerToken',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"claimFees"`.
 */
export function useGaugeClaimFees<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gaugeABI,
          'claimFees'
        >['request']['abi'],
        'claimFees',
        TMode
      > & { functionName?: 'claimFees' }
    : UseContractWriteConfig<typeof gaugeABI, 'claimFees', TMode> & {
        abi?: never;
        functionName?: 'claimFees';
      } = {} as any
) {
  return useContractWrite<typeof gaugeABI, 'claimFees', TMode>({
    abi: gaugeABI,
    functionName: 'claimFees',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"deposit"`.
 */
export function useGaugeDeposit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gaugeABI,
          'deposit'
        >['request']['abi'],
        'deposit',
        TMode
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<typeof gaugeABI, 'deposit', TMode> & {
        abi?: never;
        functionName?: 'deposit';
      } = {} as any
) {
  return useContractWrite<typeof gaugeABI, 'deposit', TMode>({
    abi: gaugeABI,
    functionName: 'deposit',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"depositAll"`.
 */
export function useGaugeDepositAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gaugeABI,
          'depositAll'
        >['request']['abi'],
        'depositAll',
        TMode
      > & { functionName?: 'depositAll' }
    : UseContractWriteConfig<typeof gaugeABI, 'depositAll', TMode> & {
        abi?: never;
        functionName?: 'depositAll';
      } = {} as any
) {
  return useContractWrite<typeof gaugeABI, 'depositAll', TMode>({
    abi: gaugeABI,
    functionName: 'depositAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"getReward"`.
 */
export function useGaugeGetReward<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gaugeABI,
          'getReward'
        >['request']['abi'],
        'getReward',
        TMode
      > & { functionName?: 'getReward' }
    : UseContractWriteConfig<typeof gaugeABI, 'getReward', TMode> & {
        abi?: never;
        functionName?: 'getReward';
      } = {} as any
) {
  return useContractWrite<typeof gaugeABI, 'getReward', TMode>({
    abi: gaugeABI,
    functionName: 'getReward',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"notifyRewardAmount"`.
 */
export function useGaugeNotifyRewardAmount<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gaugeABI,
          'notifyRewardAmount'
        >['request']['abi'],
        'notifyRewardAmount',
        TMode
      > & { functionName?: 'notifyRewardAmount' }
    : UseContractWriteConfig<typeof gaugeABI, 'notifyRewardAmount', TMode> & {
        abi?: never;
        functionName?: 'notifyRewardAmount';
      } = {} as any
) {
  return useContractWrite<typeof gaugeABI, 'notifyRewardAmount', TMode>({
    abi: gaugeABI,
    functionName: 'notifyRewardAmount',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"swapOutRewardToken"`.
 */
export function useGaugeSwapOutRewardToken<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gaugeABI,
          'swapOutRewardToken'
        >['request']['abi'],
        'swapOutRewardToken',
        TMode
      > & { functionName?: 'swapOutRewardToken' }
    : UseContractWriteConfig<typeof gaugeABI, 'swapOutRewardToken', TMode> & {
        abi?: never;
        functionName?: 'swapOutRewardToken';
      } = {} as any
) {
  return useContractWrite<typeof gaugeABI, 'swapOutRewardToken', TMode>({
    abi: gaugeABI,
    functionName: 'swapOutRewardToken',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"withdraw"`.
 */
export function useGaugeWithdraw<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gaugeABI,
          'withdraw'
        >['request']['abi'],
        'withdraw',
        TMode
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof gaugeABI, 'withdraw', TMode> & {
        abi?: never;
        functionName?: 'withdraw';
      } = {} as any
) {
  return useContractWrite<typeof gaugeABI, 'withdraw', TMode>({
    abi: gaugeABI,
    functionName: 'withdraw',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"withdrawAll"`.
 */
export function useGaugeWithdrawAll<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gaugeABI,
          'withdrawAll'
        >['request']['abi'],
        'withdrawAll',
        TMode
      > & { functionName?: 'withdrawAll' }
    : UseContractWriteConfig<typeof gaugeABI, 'withdrawAll', TMode> & {
        abi?: never;
        functionName?: 'withdrawAll';
      } = {} as any
) {
  return useContractWrite<typeof gaugeABI, 'withdrawAll', TMode>({
    abi: gaugeABI,
    functionName: 'withdrawAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"withdrawToken"`.
 */
export function useGaugeWithdrawToken<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gaugeABI,
          'withdrawToken'
        >['request']['abi'],
        'withdrawToken',
        TMode
      > & { functionName?: 'withdrawToken' }
    : UseContractWriteConfig<typeof gaugeABI, 'withdrawToken', TMode> & {
        abi?: never;
        functionName?: 'withdrawToken';
      } = {} as any
) {
  return useContractWrite<typeof gaugeABI, 'withdrawToken', TMode>({
    abi: gaugeABI,
    functionName: 'withdrawToken',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gaugeABI}__.
 */
export function usePrepareGaugeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gaugeABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gaugeABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof gaugeABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"batchRewardPerToken"`.
 */
export function usePrepareGaugeBatchRewardPerToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gaugeABI, 'batchRewardPerToken'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gaugeABI,
    functionName: 'batchRewardPerToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gaugeABI, 'batchRewardPerToken'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"batchUpdateRewardPerToken"`.
 */
export function usePrepareGaugeBatchUpdateRewardPerToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gaugeABI, 'batchUpdateRewardPerToken'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gaugeABI,
    functionName: 'batchUpdateRewardPerToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gaugeABI, 'batchUpdateRewardPerToken'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"claimFees"`.
 */
export function usePrepareGaugeClaimFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gaugeABI, 'claimFees'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gaugeABI,
    functionName: 'claimFees',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gaugeABI, 'claimFees'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareGaugeDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gaugeABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gaugeABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gaugeABI, 'deposit'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"depositAll"`.
 */
export function usePrepareGaugeDepositAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gaugeABI, 'depositAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gaugeABI,
    functionName: 'depositAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gaugeABI, 'depositAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"getReward"`.
 */
export function usePrepareGaugeGetReward(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gaugeABI, 'getReward'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gaugeABI,
    functionName: 'getReward',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gaugeABI, 'getReward'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"notifyRewardAmount"`.
 */
export function usePrepareGaugeNotifyRewardAmount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gaugeABI, 'notifyRewardAmount'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gaugeABI,
    functionName: 'notifyRewardAmount',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gaugeABI, 'notifyRewardAmount'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"swapOutRewardToken"`.
 */
export function usePrepareGaugeSwapOutRewardToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gaugeABI, 'swapOutRewardToken'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gaugeABI,
    functionName: 'swapOutRewardToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gaugeABI, 'swapOutRewardToken'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareGaugeWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gaugeABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gaugeABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gaugeABI, 'withdraw'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"withdrawAll"`.
 */
export function usePrepareGaugeWithdrawAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gaugeABI, 'withdrawAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gaugeABI,
    functionName: 'withdrawAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gaugeABI, 'withdrawAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gaugeABI}__ and `functionName` set to `"withdrawToken"`.
 */
export function usePrepareGaugeWithdrawToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gaugeABI, 'withdrawToken'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gaugeABI,
    functionName: 'withdrawToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gaugeABI, 'withdrawToken'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gaugeABI}__.
 */
export function useGaugeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof gaugeABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: gaugeABI,
    ...config,
  } as UseContractEventConfig<typeof gaugeABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gaugeABI}__ and `eventName` set to `"ClaimFees"`.
 */
export function useGaugeClaimFeesEvent(
  config: Omit<
    UseContractEventConfig<typeof gaugeABI, 'ClaimFees'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: gaugeABI,
    eventName: 'ClaimFees',
    ...config,
  } as UseContractEventConfig<typeof gaugeABI, 'ClaimFees'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gaugeABI}__ and `eventName` set to `"ClaimRewards"`.
 */
export function useGaugeClaimRewardsEvent(
  config: Omit<
    UseContractEventConfig<typeof gaugeABI, 'ClaimRewards'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: gaugeABI,
    eventName: 'ClaimRewards',
    ...config,
  } as UseContractEventConfig<typeof gaugeABI, 'ClaimRewards'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gaugeABI}__ and `eventName` set to `"Deposit"`.
 */
export function useGaugeDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof gaugeABI, 'Deposit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: gaugeABI,
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<typeof gaugeABI, 'Deposit'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gaugeABI}__ and `eventName` set to `"NotifyReward"`.
 */
export function useGaugeNotifyRewardEvent(
  config: Omit<
    UseContractEventConfig<typeof gaugeABI, 'NotifyReward'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: gaugeABI,
    eventName: 'NotifyReward',
    ...config,
  } as UseContractEventConfig<typeof gaugeABI, 'NotifyReward'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gaugeABI}__ and `eventName` set to `"Withdraw"`.
 */
export function useGaugeWithdrawEvent(
  config: Omit<
    UseContractEventConfig<typeof gaugeABI, 'Withdraw'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: gaugeABI,
    eventName: 'Withdraw',
    ...config,
  } as UseContractEventConfig<typeof gaugeABI, 'Withdraw'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__.
 */
export function useBribeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: bribeABI, ...config } as UseContractReadConfig<
    typeof bribeABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"_ve"`.
 */
export function useBribeVe<
  TFunctionName extends '_ve',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: '_ve',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useBribeBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useBribeCheckpoints<
  TFunctionName extends 'checkpoints',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'checkpoints',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"earned"`.
 */
export function useBribeEarned<
  TFunctionName extends 'earned',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'earned',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"getEpochStart"`.
 */
export function useBribeGetEpochStart<
  TFunctionName extends 'getEpochStart',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'getEpochStart',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"getPriorBalanceIndex"`.
 */
export function useBribeGetPriorBalanceIndex<
  TFunctionName extends 'getPriorBalanceIndex',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'getPriorBalanceIndex',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"getPriorSupplyIndex"`.
 */
export function useBribeGetPriorSupplyIndex<
  TFunctionName extends 'getPriorSupplyIndex',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'getPriorSupplyIndex',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"isReward"`.
 */
export function useBribeIsReward<
  TFunctionName extends 'isReward',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'isReward',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"lastEarn"`.
 */
export function useBribeLastEarn<
  TFunctionName extends 'lastEarn',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'lastEarn',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"lastTimeRewardApplicable"`.
 */
export function useBribeLastTimeRewardApplicable<
  TFunctionName extends 'lastTimeRewardApplicable',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'lastTimeRewardApplicable',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"left"`.
 */
export function useBribeLeft<
  TFunctionName extends 'left',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'left',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"numCheckpoints"`.
 */
export function useBribeNumCheckpoints<
  TFunctionName extends 'numCheckpoints',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'numCheckpoints',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"periodFinish"`.
 */
export function useBribePeriodFinish<
  TFunctionName extends 'periodFinish',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'periodFinish',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"rewards"`.
 */
export function useBribeRewards<
  TFunctionName extends 'rewards',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'rewards',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"rewardsListLength"`.
 */
export function useBribeRewardsListLength<
  TFunctionName extends 'rewardsListLength',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'rewardsListLength',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"supplyCheckpoints"`.
 */
export function useBribeSupplyCheckpoints<
  TFunctionName extends 'supplyCheckpoints',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'supplyCheckpoints',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"supplyNumCheckpoints"`.
 */
export function useBribeSupplyNumCheckpoints<
  TFunctionName extends 'supplyNumCheckpoints',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'supplyNumCheckpoints',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"tokenRewardsPerEpoch"`.
 */
export function useBribeTokenRewardsPerEpoch<
  TFunctionName extends 'tokenRewardsPerEpoch',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'tokenRewardsPerEpoch',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useBribeTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"voter"`.
 */
export function useBribeVoter<
  TFunctionName extends 'voter',
  TSelectData = ReadContractResult<typeof bribeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bribeABI,
    functionName: 'voter',
    ...config,
  } as UseContractReadConfig<typeof bribeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bribeABI}__.
 */
export function useBribeWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof bribeABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof bribeABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof bribeABI, TFunctionName, TMode>({
    abi: bribeABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"_deposit"`.
 */
export function useBribeDeposit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bribeABI,
          '_deposit'
        >['request']['abi'],
        '_deposit',
        TMode
      > & { functionName?: '_deposit' }
    : UseContractWriteConfig<typeof bribeABI, '_deposit', TMode> & {
        abi?: never;
        functionName?: '_deposit';
      } = {} as any
) {
  return useContractWrite<typeof bribeABI, '_deposit', TMode>({
    abi: bribeABI,
    functionName: '_deposit',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"_withdraw"`.
 */
export function useBribeWithdraw<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bribeABI,
          '_withdraw'
        >['request']['abi'],
        '_withdraw',
        TMode
      > & { functionName?: '_withdraw' }
    : UseContractWriteConfig<typeof bribeABI, '_withdraw', TMode> & {
        abi?: never;
        functionName?: '_withdraw';
      } = {} as any
) {
  return useContractWrite<typeof bribeABI, '_withdraw', TMode>({
    abi: bribeABI,
    functionName: '_withdraw',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"getReward"`.
 */
export function useBribeGetReward<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bribeABI,
          'getReward'
        >['request']['abi'],
        'getReward',
        TMode
      > & { functionName?: 'getReward' }
    : UseContractWriteConfig<typeof bribeABI, 'getReward', TMode> & {
        abi?: never;
        functionName?: 'getReward';
      } = {} as any
) {
  return useContractWrite<typeof bribeABI, 'getReward', TMode>({
    abi: bribeABI,
    functionName: 'getReward',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"getRewardForOwner"`.
 */
export function useBribeGetRewardForOwner<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bribeABI,
          'getRewardForOwner'
        >['request']['abi'],
        'getRewardForOwner',
        TMode
      > & { functionName?: 'getRewardForOwner' }
    : UseContractWriteConfig<typeof bribeABI, 'getRewardForOwner', TMode> & {
        abi?: never;
        functionName?: 'getRewardForOwner';
      } = {} as any
) {
  return useContractWrite<typeof bribeABI, 'getRewardForOwner', TMode>({
    abi: bribeABI,
    functionName: 'getRewardForOwner',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"notifyRewardAmount"`.
 */
export function useBribeNotifyRewardAmount<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bribeABI,
          'notifyRewardAmount'
        >['request']['abi'],
        'notifyRewardAmount',
        TMode
      > & { functionName?: 'notifyRewardAmount' }
    : UseContractWriteConfig<typeof bribeABI, 'notifyRewardAmount', TMode> & {
        abi?: never;
        functionName?: 'notifyRewardAmount';
      } = {} as any
) {
  return useContractWrite<typeof bribeABI, 'notifyRewardAmount', TMode>({
    abi: bribeABI,
    functionName: 'notifyRewardAmount',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"swapOutRewardToken"`.
 */
export function useBribeSwapOutRewardToken<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bribeABI,
          'swapOutRewardToken'
        >['request']['abi'],
        'swapOutRewardToken',
        TMode
      > & { functionName?: 'swapOutRewardToken' }
    : UseContractWriteConfig<typeof bribeABI, 'swapOutRewardToken', TMode> & {
        abi?: never;
        functionName?: 'swapOutRewardToken';
      } = {} as any
) {
  return useContractWrite<typeof bribeABI, 'swapOutRewardToken', TMode>({
    abi: bribeABI,
    functionName: 'swapOutRewardToken',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bribeABI}__.
 */
export function usePrepareBribeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bribeABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bribeABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bribeABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"_deposit"`.
 */
export function usePrepareBribeDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bribeABI, '_deposit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bribeABI,
    functionName: '_deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bribeABI, '_deposit'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"_withdraw"`.
 */
export function usePrepareBribeWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bribeABI, '_withdraw'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bribeABI,
    functionName: '_withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bribeABI, '_withdraw'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"getReward"`.
 */
export function usePrepareBribeGetReward(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bribeABI, 'getReward'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bribeABI,
    functionName: 'getReward',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bribeABI, 'getReward'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"getRewardForOwner"`.
 */
export function usePrepareBribeGetRewardForOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bribeABI, 'getRewardForOwner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bribeABI,
    functionName: 'getRewardForOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bribeABI, 'getRewardForOwner'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"notifyRewardAmount"`.
 */
export function usePrepareBribeNotifyRewardAmount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bribeABI, 'notifyRewardAmount'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bribeABI,
    functionName: 'notifyRewardAmount',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bribeABI, 'notifyRewardAmount'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bribeABI}__ and `functionName` set to `"swapOutRewardToken"`.
 */
export function usePrepareBribeSwapOutRewardToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bribeABI, 'swapOutRewardToken'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bribeABI,
    functionName: 'swapOutRewardToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bribeABI, 'swapOutRewardToken'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bribeABI}__.
 */
export function useBribeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bribeABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: bribeABI,
    ...config,
  } as UseContractEventConfig<typeof bribeABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bribeABI}__ and `eventName` set to `"ClaimRewards"`.
 */
export function useBribeClaimRewardsEvent(
  config: Omit<
    UseContractEventConfig<typeof bribeABI, 'ClaimRewards'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: bribeABI,
    eventName: 'ClaimRewards',
    ...config,
  } as UseContractEventConfig<typeof bribeABI, 'ClaimRewards'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bribeABI}__ and `eventName` set to `"Deposit"`.
 */
export function useBribeDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof bribeABI, 'Deposit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: bribeABI,
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<typeof bribeABI, 'Deposit'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bribeABI}__ and `eventName` set to `"NotifyReward"`.
 */
export function useBribeNotifyRewardEvent(
  config: Omit<
    UseContractEventConfig<typeof bribeABI, 'NotifyReward'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: bribeABI,
    eventName: 'NotifyReward',
    ...config,
  } as UseContractEventConfig<typeof bribeABI, 'NotifyReward'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bribeABI}__ and `eventName` set to `"Withdraw"`.
 */
export function useBribeWithdrawEvent(
  config: Omit<
    UseContractEventConfig<typeof bribeABI, 'Withdraw'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: bribeABI,
    eventName: 'Withdraw',
    ...config,
  } as UseContractEventConfig<typeof bribeABI, 'Withdraw'>);
}
